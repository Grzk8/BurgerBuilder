{"version":3,"sources":["assets/images/burger-logo.png","components/Burger/Logo/Logo.js","components/Navigation/NavigationItems/NavigationItem/NavigationItem.js","components/Navigation/NavigationItems/NavigationItems.js","components/Navigation/SideDrawer/DrawerToggle/DrawerToggle.js","components/Navigation/Toolbar/Toolbar.js","components/Layout/Backdrop/Backdrop.js","components/Navigation/SideDrawer/SideDrawer.js","components/Layout/Layout.js","components/Layout/Spinner/Spinner.js","components/Burger/BurgerIngredient/BurgerIngredient.js","components/Burger/Burger.js","components/Burger/BuildControls/BuildControl/BuildControl.js","components/Burger/BuildControls/BuildControls.js","components/Layout/Modal/Modal.js","components/Layout/Button/Button.js","components/Burger/OrderSummary/OrderSummary.js","store/actions/auth.js","store/actions/actionTypes.js","components/containers/BurgerBuilder/BurgerBuilder.js","store/actions/burgerBuilder.js","store/actions/order.js","components/Order/CheckoutSummary/CheckoutSummary.js","components/Layout/Input/Input.js","components/containers/Checkout/ContactData/ContactData.js","components/containers/Checkout/Checkout.js","components/Order/Order.js","components/containers/container/Orders/Orders.js","components/Auth/Auth.js","components/Auth/Logout/Logout.js","App.js","serviceWorker.js","store/reducers/burgerBuilder.js","store/reducers/order.js","store/utility.js","store/reducers/auth.js","index.js"],"names":["module","exports","logo","props","className","style","height","src","burgerLogo","alt","navigationItem","to","link","exact","activeClassName","children","navigationItems","NavigationItem","checkPropTypes","isAuthenticated","drawerToggle","onClick","clicked","toolbar","DrawerToggle","drawerToggleClicked","Logo","NavigationItems","isAuth","backdrop","show","sideDrawer","attachedClasses","open","Backdrop","closed","join","Layout","state","showSideDrawer","sideDrawerClosedHandler","setState","sideDrawerToggleHandler","prevState","Toolbar","this","SideDrawer","Component","connect","auth","token","spinner","BurgerIngredient","ingredient","type","burger","transformedIngredients","Object","keys","ingredients","map","igKey","Array","_","i","key","reduce","arr","el","concat","length","buildControl","label","removed","disabled","added","controls","buildControls","price","toFixed","ctrl","BuildControl","ingrinientAdded","ingredientRemoved","purchasable","ordered","modal","modalClosed","transform","opacity","button","btnType","orderSummary","ingredientSummary","textTransform","Button","purchaseCancelled","purchaseContinued","authSuccess","userId","idToken","logout","localStorage","removeItem","checkAuthTimeout","expirationTime","dispatch","setTimeout","setAuthRedirectPath","path","BurgerBuilder","purchasing","purchaseHandler","onSetAuthRedirectPath","history","push","purchaseCancelHandler","purchaseContinueHandler","onInitPurchase","onInitIngredients","sum","disabledInfo","ings","error","Spinner","Burger","BuildControls","onIngridientAdded","onIngridientRemoved","updatePurchaseState","OrderSummary","Modal","burgerBuilder","totalPrice","ingName","ingredientName","fetch","then","response","json","catch","actions","Axios","checkoutSummary","width","margin","checkoutCancelled","checkoutContinued","input","inputElement","inputClasses","invalid","shouldValidate","touched","elementType","elementConfig","value","onChange","changed","options","option","displayValue","ContactData","orderForm","name","placeholder","validation","required","valid","street","zipCode","minLength","maxLength","isNumeric","email","isEmail","deliveryMethod","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifer","order","orderData","onOrderBurger","inputChangedHandler","inputIdentifier","updatedOrderForm","updatedFormElement","target","checkValidity","rules","isValid","trim","test","formElementsArray","id","config","form","onSubmit","formElement","Input","loading","axios","post","orderId","purchaseBurgerSuccess","data","purchaseBurgerFail","Checkout","checkoutCancelledHandler","goBack","checkoutContinuedHandler","replace","summary","purchasedRedirect","purchased","CheckoutSummary","match","component","amount","ingredientOutput","ig","display","border","padding","Number","parseFloat","Orders","onFetchOrders","console","log","orders","Order","queryParams","get","res","fetchedOrders","err","Auth","isemail","password","minLenght","isSignup","controlName","updatedControls","submitHandler","onAuth","swithAuthModeHandler","buildingBurger","authRedirectPath","onSetRedirectPath","errorMessage","message","authRedirect","building","authData","returnSecureToken","url","expirationDate","Date","getTime","expiresIn","setItem","localId","Logout","onLogout","App","onTryAutoSignup","routes","withRouter","getItem","Boolean","window","location","hostname","initialStore","ingrednient_prices","salad","cheese","meat","bacon","reducer","action","initialState","newOrder","updateObject","oldObject","updatedProperties","authStart","authFail","authLogout","composeEnhancers","compose","rootReducer","combineReducers","burgerBuilderReducer","orderReducer","authReducer","store","createStore","applyMiddleware","thunk","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f33ad2ec.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/burger-logo.b8503d26.png\";","import React from 'react';\n\nimport burgerLogo from '../../../assets/images/burger-logo.png';\n\nconst logo = (props) => (\n    <div className='Logo'\n        style={{height: props.height}}>\n        <img src={burgerLogo} alt='BurgerBuilder'/>\n    </div>\n\n);\n\nexport default logo;","import React from 'react';\nimport {NavLink} from 'react-router-dom'\n\nconst navigationItem = (props) => (\n    <li className='NavigationItem'>\n        <NavLink \n        to={props.link}\n        exact\n        activeClassName='active'>{props.children}</NavLink></li>\n);\n\nexport default navigationItem;","import { checkPropTypes } from 'prop-types';\nimport React from 'react';\n\nimport NavigationItem from './NavigationItem/NavigationItem'\n\nconst navigationItems = (props) => (\n    <ul className='NavigationItems'>\n        < NavigationItem link='/BurgerBuilder' exact={checkPropTypes.exact} >Burger Builder</ NavigationItem>\n        {props.isAuthenticated ? < NavigationItem link='/orders'>Orders</ NavigationItem> : null}\n        { !props.isAuthenticated \n        ?< NavigationItem link='/auth'>Login</ NavigationItem> \n        : < NavigationItem link='/logout'>Logout</ NavigationItem>}\n    </ul>\n);\n\nexport default navigationItems;","import React from 'react';\n\nconst drawerToggle = (props) => (\n    <div className='DrawerToggle' onClick={props.clicked}>\n        <div></div>\n        <div></div>\n        <div></div>\n    </div>\n);\n\nexport default drawerToggle;","import React from 'react';\n\nimport Logo from '../../Burger/Logo/Logo';\nimport NavigationItems from '../NavigationItems/NavigationItems';\nimport DrawerToggle from '../SideDrawer/DrawerToggle/DrawerToggle';\n\n\nconst toolbar = props => (\n    <header className='Toolbar'>\n        <DrawerToggle clicked={props.drawerToggleClicked}/>\n        < Logo height='80%'/>\n        <nav className='DesktopOnly'>\n            <NavigationItems isAuthenticated={props.isAuth}/>\n        </nav>\n    </header>\n);\n\nexport default toolbar;","import React from 'react';\n\nconst backdrop = (props) => (\n    props.show ? <div className='Backdrop' onClick={props.clicked}></div> : null\n);\n\nexport default backdrop;","import React from 'react';\n\nimport Backdrop from '../../Layout/Backdrop/Backdrop';\n\nimport Logo from '../../Burger/Logo/Logo';\nimport NavigationItems from '../NavigationItems/NavigationItems';\n\nconst sideDrawer = (props) => {\n    let attachedClasses = ['SideDrawer', 'Close'];\n    if (props.open) {\n        attachedClasses = ['SideDrawer', 'Open']\n    }\n\n    return(\n        <>\n            <Backdrop show={props.open} clicked={props.closed}/>\n            <div className={attachedClasses.join(' ')} onClick={props.closed}>\n                <Logo height='11%'/>\n                <nav>\n                    <NavigationItems isAuthenticated={props.isAuth}/>\n                </nav>\n            </div>\n        </>\n\n    );\n};\n\nexport default sideDrawer;","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\n\nimport Toolbar from '../../components/Navigation/Toolbar/Toolbar';\nimport SideDrawer from '../Navigation/SideDrawer/SideDrawer';\n\nclass Layout extends Component {\n    state = {\n        showSideDrawer: false\n    }\n\n    sideDrawerClosedHandler = () => {\n        this.setState({showSideDrawer: false});\n    }\n\n    sideDrawerToggleHandler = () => {\n        this.setState((prevState) => { return {showSideDrawer: !prevState.showSideDrawer}\n    });\n    }\n    render() {\n        return (\n            <div>\n                <Toolbar \n                drawerToggleClicked={this.sideDrawerToggleHandler}\n                isAuth={this.props.isAuthenticated}/>\n                <SideDrawer \n                    open={this.state.showSideDrawer} \n                    closed={this.sideDrawerClosedHandler}\n                    isAuth={this.props.isAuthenticated}/>\n                <main className='content'>\n                    {this.props.children}\n                </main>\n             </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isAuthenticated: state.auth.token !== null\n    };\n};\n\nexport default connect(mapStateToProps)(Layout);","import React from 'react';\n\nconst spinner = () => (\n    <div className=\"Loader\">Loading...</div>\n);\n\nexport default spinner;","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nclass BurgerIngredient extends Component {\n    render(){\n\n        let ingredient = null;\n        \n        switch (this.props.type) {\n            case ('bread-bottom'):\n                ingredient = <div className='BreadBottom'></div>\n                break;\n            case ('bread-top'):\n                ingredient = (\n                    <div className='BreadTop'>\n                        <div className='Seeds1'></div>\n                        <div className='Seeds2'></div>\n                    </div>\n                );\n                break;\n            case ('meat'):\n                ingredient = <div className='Meat'></div>\n                break;\n                case ('cheese'):\n                    ingredient = <div className='Cheese'></div>\n                    break; \n                case ('salad'):\n                    ingredient = <div className='Salad'></div>\n                    break;      \n                case ('bacon'):\n                    ingredient = <div className='Bacon'></div>\n                    break;\n                default:\n                    ingredient = null;\n        }\n        return ingredient;\n    }\n};\n\nBurgerIngredient.propTypes = {\n    type: PropTypes.string.isRequired\n};\n\nexport default BurgerIngredient;","import React from 'react';\n\nimport BurgerIngredient from './BurgerIngredient/BurgerIngredient'\n\nconst burger = (props) => {\n    let transformedIngredients = Object.keys(props.ingredients).map(igKey => {\n        return [...Array(props.ingredients[igKey])].map((_, i) => {\n            return <BurgerIngredient key={igKey + i} type={igKey} />\n        });\n    })\n    .reduce((arr,el) => {\n        return arr.concat(el)\n    }, []);\n    if (transformedIngredients.length === 0) {\n        transformedIngredients = <p>Please start adding ingredients</p>\n    }\n    return (\n        <div className='Burger'>\n            <BurgerIngredient type='bread-top'/>\n            {transformedIngredients}\n            <BurgerIngredient type='bread-bottom'/>\n        </div>\n    );\n};\n\nexport default burger;","import React from 'react';\n\nconst buildControl = (props) => (\n    <div className='BuildControl'>\n        <div className='Label'>{props.label}</div>\n        <button \n            className='Less' \n            onClick={props.removed} \n            disabled={props.disabled}>Less</button>\n        <button \n            className='More' \n            onClick={props.added}>More</button>\n    </div>\n);\n\nexport default buildControl;","import React from 'react';\n\nimport BuildControl from './BuildControl/BuildControl'\n\nconst controls = [\n    {label: 'Salad', type: 'salad'},\n    {label: 'Bacon', type: 'bacon'},\n    {label: 'Cheese', type: 'cheese'},\n    {label: 'Meat', type: 'meat'},\n];\nconst buildControls = (props) => (\n    <div className='BuildControls'>\n        <p>Current Price: <strong>{props.price.toFixed(2)}</strong></p>\n        {controls.map(ctrl => (\n            <BuildControl \n            key={ctrl.label} \n            label={ctrl.label}\n            added= {()=>props.ingrinientAdded(ctrl.type)}\n            removed= {()=>props.ingredientRemoved(ctrl.type)}\n            disabled = {props.disabled[ctrl.type]} />\n        ))}\n        <button \n        className='OrderButton'\n        disabled={!props.purchasable}\n        onClick={props.ordered}>{props.isAuth ? 'ORDER NOW' : 'LOGIN TO ORDER'}</button>\n    </div>\n\n);\n\nexport default buildControls;","import React from 'react';\n\nimport Backdrop from '../Backdrop/Backdrop'\nconst modal = (props)  => (\n    <>\n        <Backdrop show={props.show} clicked={props.modalClosed}/>\n        <div \n            className='Modal'\n            style={{transform: props.show ? 'translateY(0)' : 'translateY(-100vh)',\n            opacity: props.show ? '1' : '0'\n            }}>\n            {props.children}\n        </div>\n    </>\n    \n);\n\nexport default modal;","import React from 'react';\n\nconst button = (props) => (\n<button \nonClick={props.clicked}\ndisabled={props.disabled}\nclassName={[props.btnType, 'Button'].join(' ')} >{props.children}</button>\n);\n\nexport default button;","import React from 'react';\n\nimport Button from '../../Layout/Button/Button'\n\nconst orderSummary = (props) => {\n    const ingredientSummary = Object.keys(props.ingredients).map(igKey => {\n        return (<li key={igKey}><span style={{textTransform: 'capitalize'}}>{igKey}</span>: {props.ingredients[igKey]}</li>);\n    });\n    return (\n        <>\n            <h2>Your Order</h2>\n            <p>A delicious burger with the following integridients:</p>\n            <ul>\n                {ingredientSummary}\n            </ul>\n            <p><strong>Total price: {props.price.toFixed(2)}</strong></p>\n            <p>Continue to Checkout?</p>\n            <Button btnType='Danger' clicked={props.purchaseCancelled}>CANCEL</Button>\n            <Button btnType='Success' clicked={props.purchaseContinued}>CONTINUE</Button>\n        </>\n    )\n};\n\nexport default orderSummary;","import * as actionTypes from './actionTypes';\nimport axios from 'axios';\n\nexport const authStart = () => {\n    return {\n        type: actionTypes.AUTH_START\n    };\n};\n\nexport const authSuccess = (token, userId) => {\n    return {\n        type: actionTypes.AUTH_SUCCESS,\n        idToken: token,\n        userId: userId\n    };\n};\n\nexport const authFail = (error) => {\n    return {\n        type: actionTypes.AUTH_FAIL,\n        error: error\n    };\n};\n\nexport const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('expirationDate');\n    localStorage.removeItem('userId');\n    return {\n        type: actionTypes.AUTH_LOGOUT\n    }\n};\n\nexport const checkAuthTimeout = (expirationTime) => {\n    return dispatch => {\n        setTimeout(() => {\n            dispatch(logout());\n        }, expirationTime * 1000);\n    };\n};\n\nexport const auth = (email, password, isSignup) => {\n    return dispatch => {\n        dispatch(authStart());\n        const authData = {\n            email: email,\n            password: password,\n            returnSecureToken: true,\n        };\n        let url = 'https://www.googleapis.com/identitytoolkit/v3/relyingparty/signupNewUser?key=AIzaSyAkSLdr2daVbnCHHhU1VFNQQpHRpd4dvbY';\n        if (!isSignup) {\n            url = 'https://www.googleapis.com/identitytoolkit/v3/relyingparty/verifyPassword?key=AIzaSyAkSLdr2daVbnCHHhU1VFNQQpHRpd4dvbY'};\n        axios.post(url, authData)\n        .then(response => {\n            const expirationDate = new Date(new Date().getTime() + response.data.expiresIn * 1000);\n            localStorage.setItem('token', response.data.idToken);\n            localStorage.setItem('expirationDate', expirationDate);\n            localStorage.setItem('userId', response.data.localId);\n            dispatch(authSuccess(response.data.idToken, response.data.localId));\n            dispatch(checkAuthTimeout(response.data.expiresIn))\n        })\n        .catch(err => {\n            dispatch(authFail(err.response.data.error));\n        });\n    };\n};\n\nexport const setAuthRedirectPath = (path) => {\n    return {\n        type: actionTypes.SET_AUTH_REDIRECT_PATH,\n        path: path\n    }\n}\n\nexport const authCheckState = () => {\n    return dispatch => {\n        const token = localStorage.getItem('token');\n        if(!token) {\n            dispatch(logout());\n        }else {\n            const expirationDate = new Date(localStorage.getItem('expirationDate'));\n            if (expirationDate <= new Date()){\n                dispatch(logout());\n            }else {\n                const userId = localStorage.getItem('userId');\n                dispatch(authSuccess(token, userId));\n                dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000));\n            }\n        }\n    }\n}","export const ADD_INGREDIENT = 'ADD_INGREDIENT';\nexport const REMOVE_INGREDIENT = 'REMOVE_INGREDIENT';\nexport const SET_INGREDIENTS = 'SET_INGREDIENTS';\nexport const FETCH_INGRENIENTS_FAILED = 'FETCH_INGRENIENTS_FAILED';\n\nexport const PURCHASE_BURGER_SUCCES = 'PURCHASE_BURGER_SUCCES';\nexport const PUTCHASE_BURGER_FAIL = 'PUTCHASE_BURGER_FAIL';\nexport const PURCHASE_BURGER_START = 'PURCHASE_BURGER_START';\nexport const PURCHASE_INIT = 'PURCHASE_INIT';\n\nexport const FETCH_ORDERS_START = 'FETCH_ORDERS_START';\nexport const FETCH_ORDERS_SUCCESS = 'FETCH_ORDERS_SUCCESS';\nexport const FETCH_ORDERS_FAIL = 'FETCH_ORDERS_FAIL';\n\nexport const AUTH_START = 'AUTH_START';\nexport const AUTH_SUCCESS = 'AUTH_SUCCESS';\nexport const AUTH_FAIL = 'AUTH_FAIL';\nexport const AUTH_LOGOUT = 'AUTH_LOGOUT';\n\nexport const SET_AUTH_REDIRECT_PATH = 'SET_AUTH_REDIRECT_PATH';","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport Spinner from '../../Layout/Spinner/Spinner';\nimport Burger from '../../Burger/Burger';\nimport BuildControls from '../../../components/Burger/BuildControls/BuildControls';\nimport Modal from '../../Layout/Modal/Modal';\nimport OrderSummary from '../../Burger/OrderSummary/OrderSummary';\nimport * as actions from '../../../store/actions/index';\nimport Axios from 'axios';\n\n\n\nclass BurgerBuilder extends Component {\n    state = {\n        purchasing: false\n    }\n\n    componentDidMount () {\n        this.props.onInitIngredients();\n    }\n\n    updatePurchaseState (ingredients) {\n        const sum = Object.keys(ingredients).map (igKey => {\n            return ingredients[igKey]\n        }).reduce((sum, el) => {\n            return sum + el;\n        })\n        return sum > 0;\n    }\n\n\n    purchaseHandler = () => {\n        if (this.props.isAuthenticated) {\n            this.setState({purchasing: true});\n        }else {\n            this.props.onSetAuthRedirectPath('/checkout');\n            this.props.history.push('/auth');\n        }\n        \n    }\n\n    purchaseCancelHandler = () => {\n        this.setState({purchasing: false});\n    }\n\n    purchaseContinueHandler = () => {\n        this.props.onInitPurchase(); \n        this.props.history.push('/checkout');\n    }\n\n    render (){\n        const disabledInfo = {\n            ...this.props.ings\n        }\n        for (let key in disabledInfo) {\n            disabledInfo[key] = disabledInfo[key] <= 0\n        }\n            //zwraca true lub false {salad: true, meat: false, ...}\n            let orderSummary = null;\n            let burger = this.props.error ? <p>Ingredients can't be loaded!</p> : <Spinner />;\n            \n            if (this.props.ings) {\n                burger = (\n                    <>\n                < Burger ingredients={this.props.ings}/>\n                < BuildControls \n                    ingrinientAdded = {this.props.onIngridientAdded}\n                    ingredientRemoved = {this.props.onIngridientRemoved}\n                    disabled = {disabledInfo}\n                    price = {this.props.price}\n                    purchasable = {this.updatePurchaseState(this.props.ings)}\n                    ordered={this.purchaseHandler}\n                    isAuth={this.props.isAuthenticated}/>\n                    </>\n                );\n                    orderSummary = (\n                        <OrderSummary \n                        ingredients={this.props.ings}\n                        purchaseCancelled={this.purchaseCancelHandler}\n                        purchaseContinued={this.purchaseContinueHandler}\n                        price={this.props.price}/>\n                    )\n            };\n\n        return (\n            <>\n                <Modal \n                show={this.state.purchasing}\n                modalClosed={this.purchaseCancelHandler}>\n                    {orderSummary}\n                </Modal>\n                {burger}\n            </>\n        );\n    }\n};\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,   // mamy dwa reduktory więc wybieramy właściwy -> state.burgerBuilder\n        price: state.burgerBuilder.totalPrice,\n        error: state.burgerBuilder.error,\n        isAuthenticated: state.auth.token !== null\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onIngridientAdded: (ingName) => dispatch(actions.addIngredient(ingName)),\n        onIngridientRemoved: (ingName) => dispatch(actions.removeIngredient(ingName)),\n        onInitIngredients: () => dispatch(actions.initIngredients()),\n        onInitPurchase: () => dispatch(actions.purchaseInit()),\n        onSetAuthRedirectPath: (path) => dispatch(actions.setAuthRedirectPath(path))\n    }    \n}\nexport default connect(mapStateToProps, mapDispatchToProps)(BurgerBuilder, Axios);","import * as actionTypes from './actionTypes';\n\nexport const addIngredient = (name) => {\n    return {\n        type: actionTypes.ADD_INGREDIENT,\n        ingredientName: name\n    };\n};\n\nexport const removeIngredient = (name) => {\n    return {\n        type: actionTypes.REMOVE_INGREDIENT,\n        ingredientName: name\n    };\n};\n\nexport const setIngrenients = (ingredients) => {\n    return {\n        type: actionTypes.SET_INGREDIENTS,\n        ingredients: ingredients\n    };\n};\n\nexport const fetchIngredientsFailed = () => {\n    return {\n        type: actionTypes.FETCH_INGRENIENTS_FAILED\n    }\n}\nexport const initIngredients = () => {\n    return dispatch => {\n        fetch('https://burgerbuilder-166a2.firebaseio.com/ingredients.json')\n        .then(response => response.json())\n        .then(response => {\n            dispatch(setIngrenients(response));\n        })\n        .catch(error => {\n            dispatch(fetchIngredientsFailed());\n        });\n    };\n}","import * as actionsType from './actionTypes';\nimport axios from 'axios';\n\nexport const purchaseBurgerSuccess = (id, orderData) => {\n    return {\n        type: actionsType.PURCHASE_BURGER_SUCCES,\n        orderId: id,\n        orderData: orderData\n    };\n};\n\nexport const purchaseBurgerFail = (error) => {\n    return {\n        type: actionsType.PUTCHASE_BURGER_FAIL,\n        error: error\n    };\n};\n\nexport const purchaseBurgerStart = () => {\n    return {\n        type: actionsType.PURCHASE_BURGER_START\n    };\n};\n\nexport const purchaseBurger = ( orderData, token ) => {\n    return dispatch => {\n        dispatch( purchaseBurgerStart() );\n        axios.post( 'https://burgerbuilder-166a2.firebaseio.com/orders.json?auth=' + token, orderData )\n            .then( response => {\n                dispatch( purchaseBurgerSuccess( response.data.name, orderData ) );\n            } )\n            .catch( error => {\n                dispatch( purchaseBurgerFail( error ) );\n            } );\n    };\n};\n\nexport const purchaseInit = () => {\n    return {\n        type: actionsType.PURCHASE_INIT\n    };\n};\n\nexport const fetchOrderStart = () => {\n    return {\n        type: actionsType.FETCH_ORDERS_START\n    };\n};\n\nexport const fetchOrderSucces= (orders) => {\n    return {\n        type: actionsType.FETCH_ORDERS_SUCCESS,\n        orders: orders\n    };\n};\n\nexport const fetchOrderFail= (error) => {\n    return {\n        type: actionsType.FETCH_ORDERS_FAIL,\n        error: error\n    };\n};\n\nexport const fetchOrders = (token, userId) => {\n    return dispatch => {\n        dispatch(fetchOrderStart());\n        const queryParams = '?auth=' + token + '&orderBy=\"userId\"&equalTo=\"' + userId + '\"';\n        axios.get( 'https://burgerbuilder-166a2.firebaseio.com/orders.json?auth=' + queryParams )\n            .then( res => {\n                const fetchedOrders = [];\n                for ( let key in res.data ) {\n                    fetchedOrders.push( {\n                        ...res.data[key],\n                        id: key\n                    } );\n                }\n                dispatch(fetchOrderSucces(fetchedOrders));\n            } )\n            .catch( err => {\n                dispatch(fetchOrderFail(err));\n            } );\n    };\n};","import React from 'react';\n\nimport Burger from '../../Burger/Burger';\nimport Button from '../../Layout/Button/Button';\n\nconst checkoutSummary = (props) => {\n    return (\n        <div className='CeckoutSummary'>\n            <h1>We hope it tastes well!</h1>\n            <div style={{width: '100%', margin: 'auto'}}>\n                <Burger ingredients= {props.ingredients}/>\n            </div>\n            <Button \n            btnType='Danger'\n            clicked={props.checkoutCancelled}\n            >CANCEL</Button>\n            <Button \n            btnType='Success'\n            clicked={props.checkoutContinued}\n            >CONTINUE</Button>\n        </div>\n    );\n};\n\nexport default checkoutSummary;","import React from 'react';\n\nconst input = (props) => {\n    let inputElement = null;\n    const inputClasses = [inputElement];\n\n    if (props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push('Invalid');\n    }\n    switch (props.elementType) {\n        case ( 'input'):\n            inputElement = <input \n                className={inputClasses.join(' ')} \n                {...props.elementConfig} \n                value={props.value} \n                onChange={props.changed}/>;\n            break;\n        case ( 'trxtarea'):\n            inputElement = <textarea \n                className='InputElement' \n                {...props.elementConfig} \n                value={props.value} \n                onChange={props.changed}/>;\n            break;\n        case ( 'select'):\n             inputElement = \n                <select \n                    className='InputElement' \n                    value={props.value} \n                    onChange={props.changed}>\n                    {props.elementConfig.options.map(option => (\n                        <option key={option.value} value={option.value}>\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>;\n            break;    \n        default:\n            inputElement = <input \n                className='InputElement' \n                {...props.elementConfig} \n                value={props.value} \n                onChange={props.changed}/> \n    }\n\n    return (\n        <div className='Input'>\n            <label className='Label'>{props.label}</label>\n            {inputElement}\n        </div>\n    );\n};\n\nexport default input;","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport Button from '../../../../components/Layout/Button/Button';\nimport Input from '../../../Layout/Input/Input';\nimport Spinner from '../../../Layout/Spinner/Spinner';\nimport * as actions from '../../../../store/actions/index';\n\n\nclass ContactData extends Component {\n    state = {\n        orderForm: {\n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Name',\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            street:  {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Street',\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                    valid: false,\n                    touched: false\n            },\n            zipCode: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'ZIP Code'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 5,\n                    maxLength: 5,\n                    isNumeric: true\n                },\n                valid: false,\n                touched: false\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Your E-Mail'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n            },\n            deliveryMethod: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        {value: 'fastest', displayValue: 'Fastest'},\n                        {value: 'cheapest', displayValue: 'Cheapest'}]\n                },\n                value: 'fastest',\n                validation: {}, // usuwa błąd walidacji przy wyborze opcji\n                valid: true\n            }\n        },\n        formIsValid: false\n    }\n\n    orderHandler = (event) => {\n        event.preventDefault();\n        const formData = {};\n        for (let formElementIdentifer in this.state.orderForm) {\n            formData[formElementIdentifer] = this.state.orderForm[formElementIdentifer].value;\n        }\n        const order = {\n            ingredients: this.props.ings,\n            price: this.props.price,\n            orderData: formData,\n            userId: this.props.userId\n        };\n        \n        this.props.onOrderBurger(order, this.props.token);\n    };\n\n    checkValidity(value, rules) {\n        let isValid = true;\n        if (!rules) {\n            return true;\n        }\n        \n        if (rules.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n\n        if (rules.minLength) {\n            isValid = value.length >= rules.minLength && isValid\n        }\n\n        if (rules.maxLength) {\n            isValid = value.length <= rules.maxLength && isValid\n        }\n\n        if (rules.isEmail) {\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        if (rules.isNumeric) {\n            const pattern = /^\\d+$/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        return isValid;\n    }\n\n    inputChangedHandler = (event, inputIdentifier) => {\n        const updatedOrderForm = {\n            ...this.state.orderForm\n        }\n        // klonuję stan ale bez klonowania głębokiego, nie mam dostępu do wartości wewnątrz name, street itd\n        // muszę sklonować je osobno:    , teraz mam dostęp do elementType, value nie mam do elementConfig \n        let updatedFormElement = {\n            ...updatedOrderForm[inputIdentifier]\n        }\n        updatedFormElement.value = event.target.value;\n        updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n        updatedFormElement.touched = true;\n        updatedOrderForm[inputIdentifier] = updatedFormElement;\n               \n        let formIsValid = true;\n        for (let inputIdentifier in updatedOrderForm) {\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n        }\n        this.setState({orderForm: updatedOrderForm, formIsValid: formIsValid});\n    };\n\n\n    render () {\n        const formElementsArray = [];\n        for (let key in this.state.orderForm) {\n            formElementsArray.push({\n                id:key,\n                config: this.state.orderForm[key]\n            })\n        }\n\n        let form = (\n            <form onSubmit={this.orderHandler}>\n                {formElementsArray.map(formElement => (\n                    <Input \n                        key={formElement.id}\n                        elementType={formElement.config.elementType}\n                        elementConfig={formElement.config.elementConfig}\n                        value={formElement.config.value}\n                        invalid={!formElement.config.valid}\n                        shouldValidate={formElement.config.validation}\n                        touched={formElement.config.touched}\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)}/>\n                ))}\n                <Button btnType='Success' disabled={!this.state.formIsValid} clicked={this.orderHandler}>ORDER</Button>\n        </form>\n        );\n        if (this.props.loading) {\n            form = <Spinner />\n        }\n        return (\n            <div className='ContactData'>\n                <h4>Enter your Contact Data</h4>\n            {form}\n            </div>\n        );\n    }\n};\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,   // mamy dwa reduktory więc wybieramy właściwy -> state.burgerBuilder\n        price: state.burgerBuilder.totalPrice,\n        loading: state.order.loading,\n        token: state.auth.token,\n        userId: state.auth.userId\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactData);","import React, {Component} from 'react';\nimport { Redirect, Route } from 'react-router-dom';\nimport {connect} from 'react-redux';\n\nimport CheckoutSummary from '../../Order/CheckoutSummary/CheckoutSummary';\nimport ContactData from './ContactData/ContactData';\n\nclass Checkout extends Component {\n\n    checkoutCancelledHandler = () => {\n        this.props.history.goBack();\n    };\n\n    checkoutContinuedHandler = () => {\n        this.props.history.replace('/checkout/contact-data');\n    };\n\n    render () {\n        let summary = <Redirect to=\"/BurgerBuilder\"/>\n        if (this.props.ings) {\n            const purchasedRedirect = this.props.purchased ? <Redirect to=\"/BurgerBuilder\" /> : null\n            summary = (\n                <>\n                    {purchasedRedirect}\n                    <CheckoutSummary \n                        ingredients={this.props.ings}\n                        checkoutCancelled={this.checkoutCancelledHandler}\n                        checkoutContinued={this.checkoutContinuedHandler}/>\n                    <Route \n                        path={this.props.match.path + '/contact-data'}\n                        component={ContactData} />\n                </> );\n        };\n        return summary\n    };\n};\n\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,    // mamy dwa reduktory więc wybieramy właściwy -> state.burgerBuilder\n        purchased: state.order.purchased\n    }\n};\n\nexport default connect(mapStateToProps)(Checkout);","import React from 'react';\n\nconst order = (props) => {\n    const ingredients = [];\n    for (let ingredientName in props.ingredients) {\n        ingredients.push(\n            {name: ingredientName, \n                amount: props.ingredients[ingredientName]})\n    }\n\n    const ingredientOutput = ingredients.map(ig => {\n    return <span \n        style={{\n            textTransform: 'capitalize', \n            display: 'inline-block', \n            margin: '0 8px', \n            border: '1px solid #ccc',\n            padding: '5px'}}\n        key={ig.name}>{ig.name} {ig.amount}</span>\n    });\n    return (\n        <div className='Order'>\n            <p>Ingredients: {ingredientOutput}</p>\n            <p>Price: PLN {Number.parseFloat(props.price.toFixed(2))}</p>\n        </div>\n    )\n};\n\nexport default order;","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\n\nimport Order from '../../../../components/Order/Order';\nimport * as actions from '../../../../store/actions/index';\nimport Spinner from '../../../Layout/Spinner/Spinner';\n\nclass Orders extends Component {\n    \n    componentDidMount() {\n        this.props.onFetchOrders(this.props.token, this.props.userId);\n    }\n    render() {\n        console.log(this.props.orders)\n        let orders = <Spinner />;\n        if (!this.props.loading){\n            orders = ( this.props.orders.map(order => (\n                    <Order \n                    key={order.id}\n                    ingredients={order.ingredients}\n                    price={+order.price}/>\n                ))\n            );\n        }\n        return (\n            <>\n                {orders}\n            </>\n        );\n    }\n};\n\nconst mapStateToProps = state => {\n    return {\n        orders: state.order.orders,\n        loading: state.order.loading,\n        token: state.auth.token,\n        userId: state.auth.userId\n    }\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        onFetchOrders: (token, userId) => dispatch(actions.fetchOrders(token, userId)) \n    }\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Orders);","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport {Redirect} from 'react-router-dom';\n\nimport Input from '../Layout/Input/Input';\nimport Button from '../Layout/Button/Button';\nimport Spinner from '../Layout/Spinner/Spinner';\nimport * as actions from '../../store/actions/index';\n\nclass Auth extends Component {\n    state = {\n        controls: {\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Mail Address',\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isemail: true\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Password',\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLenght: 6\n                },\n                valid: false,\n                touched: false\n            }\n        },\n        isSignup: true\n    };\n\n    componentDidMount() {\n        if (!this.props.buildingBurger && this.props.authRedirectPath !== '/BurgerBuilder') {\n            this.props.onSetRedirectPath();\n        }\n    };\n\n    checkValidity(value, rules) {\n        let isValid = true;\n        if (!rules) {\n            return true;\n        }\n        \n        if (rules.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n\n        if (rules.minLength) {\n            isValid = value.length >= rules.minLength && isValid\n        }\n\n        if (rules.maxLength) {\n            isValid = value.length <= rules.maxLength && isValid\n        }\n\n        if (rules.isEmail) {\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        if (rules.isNumeric) {\n            const pattern = /^\\d+$/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        return isValid;\n    };\n\n    inputChangedHandler = (event, controlName) => {\n        const updatedControls = {\n            ...this.state.controls,\n            [controlName]: {\n                ...this.state.controls[controlName],\n                value: event.target.value,\n                valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\n                touched: true\n            }\n        };\n        this.setState({controls: updatedControls});\n    };\n\n    submitHandler = (event) => {\n        event.preventDefault();\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup)\n    };\n\n    swithAuthModeHandler = () => {\n        this.setState(prevState => {\n            return {isSignup: !prevState.isSignup};\n        });\n    };\n\n    render() {\n        const formElementsArray = [];\n        for (let key in this.state.controls) {\n            formElementsArray.push({\n                id:key,\n                config: this.state.controls[key]\n            });\n        };\n\n        let form = formElementsArray.map(formElement => (\n                < Input \n                    key={formElement.id}\n                    elementType={formElement.config.elementType}\n                    elementConfig={formElement.config.elementConfig}\n                    value={formElement.config.value}\n                    invalid={!formElement.config.valid}\n                    shouldValidate={formElement.config.validation}\n                    touched={formElement.config.touched}\n                    changed={(event) => this.inputChangedHandler(event, formElement.id)}/>\n        ) );\n\n        if (this.props.loading) {\n            form = <Spinner/>\n        }\n\n        let errorMessage = null;\n        if (this.props.error) {\n            errorMessage = (\n                <p>{this.props.error.message}</p>\n            );\n        };\n\n        let authRedirect = null;\n        if (this.props.isAuthenticated) {\n            authRedirect = <Redirect to={this.props.authRedirectPath}/>\n        }\n\n\n        return(\n            <div className='Auth'>\n                {authRedirect}\n                {errorMessage}\n                <form onSubmit={this.submitHandler}>\n                    {form}\n                    <Button btnType='Success'>SUBMIT</Button>\n                </form>\n        <Button\n            clicked={this.swithAuthModeHandler} \n            btnType='Danger'>{this.state.isSignup ? 'LOGIN' : 'SIGNUP'}\n        </Button>\n            </div>\n        );\n    };\n};\n\nconst mapStatrToProps = state => {\n    return {\n        loading: state.auth.loading,\n        error: state.auth.error,\n        isAuthenticated: state.auth.token !==null,\n        buildingBurger: state.burgerBuilder.building,\n        authRedirectPath: state.auth.authRedirectPath\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\n        onSetRedirectPath: () => dispatch(actions.setAuthRedirectPath('/burgerBuilder'))\n    };\n};\nexport default connect(mapStatrToProps, mapDispatchToProps)(Auth);","import React, { Component} from 'react';\nimport { connect } from 'react-redux';\nimport {Redirect} from 'react-router-dom';\n\nimport * as actions from '../../../store/actions/index';\nclass Logout extends Component {\n\n    componentDidMount () {\n        this.props.onLogout();\n    };\n    render () {\n        return <Redirect to='/BurgerBuilder'/>\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onLogout: () => dispatch(actions.logout())\n    };\n};\n\nexport default connect(null, mapDispatchToProps) (Logout);","import React, { Component } from 'react';\nimport { Route, Switch, withRouter, Redirect} from 'react-router-dom';\nimport {connect} from 'react-redux';\n\nimport Layout from './components/Layout/Layout';\nimport BurgerBuilder from './components/containers/BurgerBuilder/BurgerBuilder';\nimport Checkout from './components/containers/Checkout/Checkout';\nimport Orders from './components/containers/container/Orders/Orders';\nimport Auth from './components/Auth/Auth';\nimport Logout from './components/Auth/Logout/Logout';\nimport * as actions from './store/actions/index';\n\nclass App extends Component {\n  componentDidMount (){\n    this.props.onTryAutoSignup();\n  }\n  render() {\n\n    let routes = (\n      <Switch>\n        <Route path='/auth' component={Auth} />\n        <Route path='/BurgerBuilder' exact component={BurgerBuilder} />\n        <Redirect to='/BurgerBuilder' />\n    </Switch>\n    );\n    if (this.props.isAuthenticated) {\n      routes = (\n        <Switch>\n          <Route path='/checkout' component={Checkout} />\n          <Route path='/orders' component={Orders} />\n          <Route path='/logout' component={Logout} />\n          <Route path='/auth' component={Auth} />\n          <Route path='/BurgerBuilder' exact component={BurgerBuilder} />]\n          <Redirect to='/BurgerBuilder' />\n      </Switch>\n      );\n    }\n    return(\n      <>\n        <Layout>\n          {routes}\n        </Layout>\n      </>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    isAuthenticated: state.auth.token !== null\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    onTryAutoSignup: () => dispatch(actions.authCheckState())\n  }\n}\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from '../actions/actionTypes';\n\nconst initialStore = {\n    ingredients: null,\n    totalPrice: 4,\n    error: false,\n    building: false\n};\n\nconst ingrednient_prices = {\n    salad: 0.4,\n    cheese: 0.5,\n    meat: 1.3,\n    bacon: 0.7\n}\n\nconst reducer = (state = initialStore, action) => {\n    switch(action.type) {\n        case actionTypes.ADD_INGREDIENT:\n            return {\n                ...state,\n                ingredients: {\n                    ...state.ingredients,\n                    [action.ingredientName]: state.ingredients[action.ingredientName] + 1\n                },\n                totalPrice: state.totalPrice + ingrednient_prices[action.ingredientName],\n                building: true\n\n            };\n        case actionTypes.REMOVE_INGREDIENT:\n            return {\n                ...state,\n                ingredients: {\n                    ...state.ingredients,\n                    [action.ingredientName]: state.ingredients[action.ingredientName] - 1\n                },\n                totalPrice: state.totalPrice - ingrednient_prices[action.ingredientName],\n                building: true\n\n            };\n        case actionTypes.SET_INGREDIENTS:\n            return {\n                ...state,\n                ingredients: {\n                    salad: action.ingredients.salad,\n                    bacon: action.ingredients.bacon,\n                    cheese: action.ingredients.cheese,\n                    meat: action.ingredients.meat\n                },\n                error: false,\n                totalPrice: 4,\n                building: false\n            };\n        case actionTypes.FETCH_INGRENIENTS_FAILED:\n            return {\n                ...state,\n                error: true\n            }        \n        default:\n            return state;\n    };  \n};\n\nexport default reducer;","import * as actionTypes from '../actions/actionTypes';\n\n\nconst initialState = {\n    orders: [],\n    loading: false,\n    purchased: false\n}\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.PURCHASE_BURGER_START:\n            return {\n                ...state,\n                loading: true\n            };\n        case actionTypes.PURCHASE_BURGER_SUCCES:\n            const newOrder = {\n                ...action.orderData,\n                id: action.orderId\n            };\n            return {\n                ...state,\n                loading: false,\n                purchased: true,\n                orders: state.orders.concat(newOrder)\n            };\n        case actionTypes.FETCH_INGRENIENTS_FAILED:\n            return {\n                ...state,\n                loading: false \n            };\n        case actionTypes.PURCHASE_INIT:\n            return {\n                ...state,\n                purchased: false  \n            };    \n        case actionTypes.FETCH_ORDERS_START:\n            return {\n                ...state,\n                loading: true\n            };\n        case actionTypes.FETCH_ORDERS_SUCCESS:\n            return {\n                ...state,\n                orders: action.orders,\n                loading: false\n            }\n        case actionTypes.FETCH_ORDERS_FAIL:\n            return {\n                ...state,\n                loading: false\n            }           \n        default:\n            return state;        \n    };\n};\n\nexport default reducer;","export const updateObject = (oldObject, updatedProperties) => {\n    return {\n        ...oldObject,\n        ...updatedProperties\n    };\n};","import * as actionTypes from '../actions/actionTypes';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    token: null,\n    userId: null,\n    error: null,\n    loading: false,\n    authRedirectPath: '/BurgerBuilder'\n};\n\nconst authStart = (state, action) => {\n    return updateObject(state, {error: null, loading: true});\n};\n\nconst authSuccess = (state, action) => {\n    return updateObject(state, {\n        error: null, \n        loading: false,\n        token: action.idToken,\n        userId: action.userId});\n};\n\nconst authFail = (state, action) => {\n    return updateObject(state, {\n        error: action.error,\n        loading: false});\n};\n\nconst authLogout = (state, action) => {\n        return updateObject(state, {token:null, userId: null});\n};\n\nconst setAuthRedirectPath = (state, action) => {\n    return updateObject(state, { authRedirectPath: action.path})\n};\n\nconst reducer = (state = initialState, action) => {\n    switch(action.type) {\n        case actionTypes.AUTH_START: return authStart(state, action);\n        case actionTypes.AUTH_SUCCESS: return authSuccess(state, action);\n        case actionTypes.AUTH_FAIL: return authFail(state, action);\n        case actionTypes.AUTH_LOGOUT: return authLogout(state, action);\n        case actionTypes.SET_AUTH_REDIRECT_PATH: return setAuthRedirectPath(state, action);\n        default: return state;    \n    };\n};\n\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"./scss/main.scss\";\nimport {BrowserRouter} from 'react-router-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware, compose, combineReducers} from 'redux';\nimport burgerBuilderReducer from './store/reducers/burgerBuilder';\nimport orderReducer from './store/reducers/order';\nimport authReducer from './store/reducers/auth';\nimport thunk from 'redux-thunk';\n\nconst composeEnhancers = process.env.NODE_ENV === 'development' ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : null || compose;\n\nconst rootReducer = combineReducers({\n    burgerBuilder: burgerBuilderReducer,\n    order: orderReducer,\n    auth: authReducer \n})\n\nconst store = createStore(rootReducer, composeEnhancers(\n    applyMiddleware(thunk)\n));\n\nconst app = (\n    <Provider store={store}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </Provider>\n\n)\nReactDOM.render( app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}