{"version":3,"sources":["assets/images/burger-logo.png","components/Burger/Logo/Logo.js","components/Navigation/NavigationItems/NavigationItem/NavigationItem.js","components/Navigation/NavigationItems/NavigationItems.js","components/Navigation/SideDrawer/DrawerToggle/DrawerToggle.js","components/Navigation/Toolbar/Toolbar.js","components/Layout/Backdrop/Backdrop.js","components/Navigation/SideDrawer/SideDrawer.js","components/Layout/Layout.js","components/Burger/BurgerIngredient/BurgerIngredient.js","components/Burger/Burger.js","components/Burger/BuildControls/BuildControl/BuildControl.js","components/Burger/BuildControls/BuildControls.js","components/Layout/Modal/Modal.js","components/Layout/Button/Button.js","components/Burger/OrderSummary/OrderSummary.js","components/containers/BurgerBuilder/BurgerBuilder.js","store/actions.js","components/Order/CheckoutSummary/CheckoutSummary.js","components/Layout/Input/Input.js","components/Layout/Spinner/Spinner.js","components/containers/Checkout/ContactData/ContactData.js","components/containers/Checkout/Checkout.js","components/Order/Order.js","components/containers/container/Orders/Orders.js","App.js","serviceWorker.js","store/reducer.js","index.js"],"names":["module","exports","logo","props","className","style","height","src","burgerLogo","alt","navigationItem","to","link","exact","activeClassName","children","navigationItems","NavigationItem","checkPropTypes","drawerToggle","onClick","clicked","toolbar","DrawerToggle","drawerToggleClicked","Logo","NavigationItems","backdrop","show","sideDrawer","attachedClasses","open","Backdrop","closed","join","Layout","state","showSideDrawer","sideDrawerClosedHandler","setState","sideDrawerToggleHandler","prevState","Toolbar","this","SideDrawer","Component","BurgerIngredient","ingredient","type","burger","transformedIngredients","Object","keys","ingredients","map","igKey","Array","_","i","key","reduce","arr","el","concat","length","buildControl","label","removed","disabled","added","controls","buildControls","price","toFixed","ctrl","BuildControl","ingrinientAdded","ingredientRemoved","purchasable","ordered","modal","modalClosed","transform","opacity","button","btnType","orderSummary","ingredientSummary","textTransform","Button","purchaseCancelled","purchaseContinued","BurgerBuilder","purchasing","purchaseHandler","purchaseCancelHandler","purchaseContinueHandler","history","push","sum","disabledInfo","ings","Modal","OrderSummary","Burger","BuildControls","onIngridientAdded","onIngridientRemoved","updatePurchaseState","connect","totalPrice","dispatch","ingName","ingredientName","checkoutSummary","width","margin","checkoutCancelled","checkoutContinued","input","inputElement","inputClasses","invalid","shouldValidate","touched","elementType","elementConfig","value","onChange","changed","options","option","displayValue","spinner","ContactData","orderForm","name","placeholder","validation","required","valid","street","zipCode","email","deliveryMethod","loading","orderHandler","event","preventDefault","formData","formElementIdentifer","order","orderData","fetch","method","headers","body","JSON","stringify","then","resp","json","catch","error","inputChangedHandler","inputIdentifier","updatedOrderForm","updatedFormElement","target","checkValidity","rules","isValid","trim","lenght","minLenght","maxLenght","formElementsArray","id","config","form","onSubmit","Input","formElement","Spinner","Checkout","checkoutCancelledHandler","goBack","checkoutContinuedHandler","replace","CheckoutSummary","path","match","component","amount","ingredientOutput","ig","display","border","padding","Number","parseFloat","Orders","orders","response","console","log","fetchedOrders","err","Order","App","Boolean","window","location","hostname","initialStore","salad","bacon","cheese","meat","ingrednient_prices","reducer","action","store","createStore","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.046ebe5d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/burger-logo.b8503d26.png\";","import React from 'react';\n\nimport burgerLogo from '../../../assets/images/burger-logo.png';\n\nconst logo = (props) => (\n    <div className='Logo'\n        style={{height: props.height}}>\n        <img src={burgerLogo} alt='BurgerBuilder'/>\n    </div>\n\n);\n\nexport default logo;","import React from 'react';\nimport {NavLink} from 'react-router-dom'\n\nconst navigationItem = (props) => (\n    <li className='NavigationItem'>\n        <NavLink \n        to={props.link}\n        exact\n        activeClassName='active'>{props.children}</NavLink></li>\n);\n\nexport default navigationItem;","import { checkPropTypes } from 'prop-types';\nimport React from 'react';\n\nimport NavigationItem from './NavigationItem/NavigationItem'\n\nconst navigationItems = () => (\n    <ul className='NavigationItems'>\n        < NavigationItem link='/' exact={checkPropTypes.exact} >Burger Builder</ NavigationItem>\n        < NavigationItem link='/orders'>Orders</ NavigationItem>\n    </ul>\n);\n\nexport default navigationItems;","import React from 'react';\n\nconst drawerToggle = (props) => (\n    <div className='DrawerToggle' onClick={props.clicked}>\n        <div></div>\n        <div></div>\n        <div></div>\n    </div>\n);\n\nexport default drawerToggle;","import React from 'react';\n\nimport Logo from '../../Burger/Logo/Logo';\nimport NavigationItems from '../NavigationItems/NavigationItems';\nimport DrawerToggle from '../SideDrawer/DrawerToggle/DrawerToggle';\n\n\nconst toolbar = props => (\n    <header className='Toolbar'>\n        <DrawerToggle clicked={props.drawerToggleClicked}/>\n        < Logo height='80%'/>\n        <nav className='DesktopOnly'>\n            <NavigationItems />\n        </nav>\n    </header>\n);\n\nexport default toolbar;","import React from 'react';\n\nconst backdrop = (props) => (\n    props.show ? <div className='Backdrop' onClick={props.clicked}></div> : null\n);\n\nexport default backdrop;","import React from 'react';\n\nimport Backdrop from '../../Layout/Backdrop/Backdrop';\n\nimport Logo from '../../Burger/Logo/Logo';\nimport NavigationItems from '../NavigationItems/NavigationItems';\n\nconst sideDrawer = (props) => {\n    let attachedClasses = ['SideDrawer', 'Close'];\n    if (props.open) {\n        attachedClasses = ['SideDrawer', 'Open']\n    }\n\n    return(\n        <>\n            <Backdrop show={props.open} clicked={props.closed}/>\n            <div className={attachedClasses.join(' ')}>\n                <Logo height='11%'/>\n                <nav>\n                    <NavigationItems />\n                </nav>\n            </div>\n        </>\n\n    );\n};\n\nexport default sideDrawer;","import React, {Component} from 'react';\n\nimport Toolbar from '../../components/Navigation/Toolbar/Toolbar';\nimport SideDrawer from '../Navigation/SideDrawer/SideDrawer';\n\nclass Layout extends Component {\n    state = {\n        showSideDrawer: false\n    }\n\n    sideDrawerClosedHandler = () => {\n        this.setState({showSideDrawer: false});\n    }\n\n    sideDrawerToggleHandler = () => {\n        this.setState((prevState) => { return {showSideDrawer: !prevState.showSideDrawer}\n    });\n    }\n    render() {\n        return (\n            <div>\n                <Toolbar drawerToggleClicked={this.sideDrawerToggleHandler}/>\n                <SideDrawer \n                    open={this.state.showSideDrawer} \n                    closed={this.sideDrawerClosedHandler}/>\n                <main className='content'>\n                    {this.props.children}\n                </main>\n             </div>\n        )\n    }\n}\nexport default Layout;","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nclass BurgerIngredient extends Component {\n    render(){\n\n        let ingredient = null;\n        \n        switch (this.props.type) {\n            case ('bread-bottom'):\n                ingredient = <div className='BreadBottom'></div>\n                break;\n            case ('bread-top'):\n                ingredient = (\n                    <div className='BreadTop'>\n                        <div className='Seeds1'></div>\n                        <div className='Seeds2'></div>\n                    </div>\n                );\n                break;\n            case ('meat'):\n                ingredient = <div className='Meat'></div>\n                break;\n                case ('cheese'):\n                    ingredient = <div className='Cheese'></div>\n                    break; \n                case ('salad'):\n                    ingredient = <div className='Salad'></div>\n                    break;      \n                case ('bacon'):\n                    ingredient = <div className='Bacon'></div>\n                    break;\n                default:\n                    ingredient = null;\n        }\n        return ingredient;\n    }\n};\n\nBurgerIngredient.propTypes = {\n    type: PropTypes.string.isRequired\n};\n\nexport default BurgerIngredient;","import React from 'react';\n\nimport BurgerIngredient from './BurgerIngredient/BurgerIngredient'\n\nconst burger = (props) => {\n    let transformedIngredients = Object.keys(props.ingredients).map(igKey => {\n        return [...Array(props.ingredients[igKey])].map((_, i) => {\n            return <BurgerIngredient key={igKey + i} type={igKey} />\n        });\n    })\n    .reduce((arr,el) => {\n        return arr.concat(el)\n    }, []);\n    if (transformedIngredients.length === 0) {\n        transformedIngredients = <p>Please start adding ingredients</p>\n    }\n    return (\n        <div className='Burger'>\n            <BurgerIngredient type='bread-top'/>\n            {transformedIngredients}\n            <BurgerIngredient type='bread-bottom'/>\n        </div>\n    );\n};\n\nexport default burger;","import React from 'react';\n\nconst buildControl = (props) => (\n    <div className='BuildControl'>\n        <div className='Label'>{props.label}</div>\n        <button \n            className='Less' \n            onClick={props.removed} \n            disabled={props.disabled}>Less</button>\n        <button \n            className='More' \n            onClick={props.added}>More</button>\n    </div>\n);\n\nexport default buildControl;","import React from 'react';\n\nimport BuildControl from './BuildControl/BuildControl'\n\nconst controls = [\n    {label: 'Salad', type: 'salad'},\n    {label: 'Bacon', type: 'bacon'},\n    {label: 'Cheese', type: 'cheese'},\n    {label: 'Meat', type: 'meat'},\n];\nconst buildControls = (props) => (\n    <div className='BuildControls'>\n        <p>Current Price: <strong>{props.price.toFixed(2)}</strong></p>\n        {controls.map(ctrl => (\n            <BuildControl \n            key={ctrl.label} \n            label={ctrl.label}\n            added= {()=>props.ingrinientAdded(ctrl.type)}\n            removed= {()=>props.ingredientRemoved(ctrl.type)}\n            disabled = {props.disabled[ctrl.type]} />\n        ))}\n        <button \n        className='OrderButton'\n        disabled={!props.purchasable}\n        onClick={props.ordered}>ORDER NOW</button>\n    </div>\n\n);\n\nexport default buildControls;","import React from 'react';\n\nimport Backdrop from '../Backdrop/Backdrop'\nconst modal = (props)  => (\n    <>\n        <Backdrop show={props.show} clicked={props.modalClosed}/>\n        <div \n            className='Modal'\n            style={{transform: props.show ? 'translateY(0)' : 'translateY(-100vh)',\n            opacity: props.show ? '1' : '0'\n            }}>\n            {props.children}\n        </div>\n    </>\n    \n);\n\nexport default modal;","import React from 'react';\n\nconst button = (props) => (\n<button \nonClick={props.clicked}\nclassName={[props.btnType, 'Button'].join(' ')} >{props.children}</button>\n);\n\nexport default button;","import React from 'react';\n\nimport Button from '../../Layout/Button/Button'\n\nconst orderSummary = (props) => {\n    const ingredientSummary = Object.keys(props.ingredients).map(igKey => {\n        return (<li key={igKey}><span style={{textTransform: 'capitalize'}}>{igKey}</span>: {props.ingredients[igKey]}</li>);\n    });\n    return (\n        <>\n            <h2>Your Order</h2>\n            <p>A delicious burger with the following integridients:</p>\n            <ul>\n                {ingredientSummary}\n            </ul>\n            <p><strong>Total price: {props.price.toFixed(2)}</strong></p>\n            <p>Continue to Checkout?</p>\n            <Button btnType='Danger' clicked={props.purchaseCancelled}>CANCEL</Button>\n            <Button btnType='Success' clicked={props.purchaseContinued}>CONTINUE</Button>\n        </>\n    )\n};\n\nexport default orderSummary;","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\n\nimport Burger from '../../Burger/Burger';\nimport BuildControls from '../../../components/Burger/BuildControls/BuildControls';\nimport Modal from '../../Layout/Modal/Modal';\nimport OrderSummary from '../../Burger/OrderSummary/OrderSummary';\nimport * as actionTypes from '../../../store/actions';\n\n\nclass BurgerBuilder extends Component {\n    state = {\n        purchasing: false\n    }\n\n    updatePurchaseState (ingredients) {\n        const sum = Object.keys(ingredients).map (igKey => {\n            return ingredients[igKey]\n        }).reduce((sum, el) => {\n            return sum + el;\n        })\n        return sum > 0;\n    }\n\n\n    purchaseHandler = () => {\n        this.setState({purchasing: true});\n    }\n\n    purchaseCancelHandler = () => {\n        this.setState({purchasing: false});\n    }\n\n    purchaseContinueHandler = () => { \n        this.props.history.push('/checkout'\n\n        );  \n    \n    }\n\n    render (){\n        const disabledInfo = {\n            ...this.props.ings\n        }\n        for (let key in disabledInfo) {\n            disabledInfo[key] = disabledInfo[key] <= 0\n        }\n            //zwraca true lub false {salad: true, meat: false, ...}\n        return (\n            <>\n                <Modal \n                show={this.state.purchasing}\n                modalClosed={this.purchaseCancelHandler}>\n                    <OrderSummary \n                    ingredients={this.props.ings}\n                    purchaseCancelled={this.purchaseCancelHandler}\n                    purchaseContinued={this.purchaseContinueHandler}\n                    price={this.props.price}/>\n                </Modal>\n                < Burger ingredients={this.props.ings}/>\n                < BuildControls \n                    ingrinientAdded = {this.props.onIngridientAdded}\n                    ingredientRemoved = {this.props.onIngridientRemoved}\n                    disabled = {disabledInfo}\n                    price = {this.props.price}\n                    purchasable = {this.updatePurchaseState(this.props.ings)}\n                    ordered={this.purchaseHandler}/>\n            </>\n        );\n    }\n};\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.ingredients,\n        price: state.totalPrice\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onIngridientAdded: (ingName) => dispatch({type: actionTypes.ADD_INGREDIENT, ingredientName: ingName}),\n        onIngridientRemoved: (ingName) => dispatch({type: actionTypes.REMOVE_INGREDIENT, ingredientName: ingName})\n    }    \n}\nexport default connect(mapStateToProps, mapDispatchToProps)(BurgerBuilder);","export const ADD_INGREDIENT = 'ADD_INGREDIENT';\nexport const REMOVE_INGREDIENT = 'REMOVE_INGREDIENT';","import React from 'react';\n\nimport Burger from '../../Burger/Burger';\nimport Button from '../../Layout/Button/Button';\n\nconst checkoutSummary = (props) => {\n    return (\n        <div className='CeckoutSummary'>\n            <h1>We hope it tastes well!</h1>\n            <div style={{width: '100%', margin: 'auto'}}>\n                <Burger ingredients= {props.ingredients}/>\n            </div>\n            <Button \n            btnType='Danger'\n            clicked={props.checkoutCancelled}\n            >CANCEL</Button>\n            <Button \n            btnType='Success'\n            clicked={props.checkoutContinued}\n            >CONTINUE</Button>\n        </div>\n    );\n};\n\nexport default checkoutSummary;","import React from 'react';\n\nconst input = (props) => {\n    let inputElement = null;\n    const inputClasses = [inputElement];\n\n    if (props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push('Invalid');\n    }\n    switch (props.elementType) {\n        case ( 'input'):\n            inputElement = <input \n                className={inputClasses.join(' ')} \n                {...props.elementConfig} \n                value={props.value} \n                onChange={props.changed}/>;\n            break;\n        case ( 'trxtarea'):\n            inputElement = <textarea \n                className='InputElement' \n                {...props.elementConfig} \n                value={props.value} \n                onChange={props.changed}/>;\n            break;\n        case ( 'select'):\n             inputElement = \n                <select \n                    className='InputElement' \n                    value={props.value} \n                    onChange={props.changed}>\n                    {props.elementConfig.options.map(option => (\n                        <option key={option.value} value={option.value}>\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>;\n            break;    \n        default:\n            inputElement = <input \n                className='InputElement' \n                {...props.elementConfig} \n                value={props.value} \n                onChange={props.changed}/> \n    }\n\n    return (\n        <div className='Input'>\n            <label className='Label'>{props.label}</label>\n            {inputElement}\n        </div>\n    );\n};\n\nexport default input;","import React from 'react';\n\nconst spinner = () => (\n    <div className=\"Loader\">Loading...</div>\n);\n\nexport default spinner;","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport Button from '../../../../components/Layout/Button/Button';\nimport Input from '../../../Layout/Input/Input';\nimport Spinner from '../../../Layout/Spinner/Spinner';\n\nclass ContactData extends Component {\n    state = {\n        orderForm: {\n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Name',\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            street:  {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Street',\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    valid: false,\n                    touched: false\n                }\n            },\n            zipCode:  {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'ZIP',\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    valid: false,\n                    touched: false\n                }\n            },\n            email:  {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Your Mail',\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    valid: false,\n                    touched: false\n                }\n            },\n            deliveryMethod: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        {value: 'fastest', displayValue: 'Fastest'},\n                        {value: 'cheapest', displayValue: 'Cheapest'}]\n                },\n                value: ''\n            }\n        },\n        loading: false\n    }\n\n    orderHandler = (event) => {\n        event.preventDefault();\n        this.setState({loading: true});\n        const formData = {};\n        for (let formElementIdentifer in this.state.orderForm) {\n            formData[formElementIdentifer] = this.state.orderForm[formElementIdentifer].value;\n        }\n        const order = {\n            ingredients: this.props.ings,\n            price: this.props.price,\n            orderData: formData\n       \n        }\n        fetch('http://localhost:3000/orders',{\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n              }, \n            body: JSON.stringify({order})})\n        .then(resp => resp.json())\n        .then(resp => \n            (this.setState({loading: false})))\n        .catch(error => \n        (this.setState({loading: false})));\n        this.props.history.push('/');\n    }\n\n    checkValidity(value, rules) {\n        let isValid = true;\n\n        if (rules.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n        if (rules.required) {\n            isValid = value.lenght >= rules.minLenght && isValid;\n        }\n        if (rules.required) {\n            isValid = value.lenght <= rules.maxLenght && isValid;\n        }\n        return isValid;\n    }\n\n    inputChangedHandler = (event, inputIdentifier) => {\n        const updatedOrderForm = {\n            ...this.state.orderForm\n        }\n        // klonuję stan ale bez klonowania głębokiego, nie mam dostępu do wartości wewnątrz name, street itd\n        // muszę sklonować je osobno:    , teraz mam dostęp do elementType, value nie mam do elementConfig \n        let updatedFormElement = {\n            ...updatedOrderForm[inputIdentifier]\n        }\n        updatedFormElement = event.target.value;\n        updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n        updatedFormElement.touched = true;\n        updatedOrderForm[inputIdentifier] = updatedFormElement;\n        this.setState({orderForm: updatedOrderForm});\n    };\n\n\n    render () {\n        const formElementsArray = [];\n        for (let key in this.state.orderForm) {\n            formElementsArray.push({\n                id:key,\n                config: this.state.orderForm[key]\n            })\n        }\n\n        let form = (\n            <form onSubmit={this.orderHandler}>\n                <Input elementType='' elementConfig='' value='' />\n                {formElementsArray.map(formElement => (\n                    <Input \n                        key={formElement.id}\n                        elementType={formElement.config.elementType}\n                        elementConfig={formElement.config.elementConfig}\n                        value={formElement.config.value}\n                        invalid={!formElement.config.valid}\n                        shouldValidate={formElement.config.validation}\n                        touched={formElement.config.touched}\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)}/>\n                ))}\n                <Button btnType='Success' clicked={this.orderHandler}>ORDER</Button>\n        </form>\n        );\n        if (this.state.loading) {\n            form = <Spinner />\n        }\n        return (\n            <div className='ContactData'>\n                <h4>Enter your Contact Data</h4>\n            {form}\n            </div>\n        );\n    }\n};\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.ingredients,\n        price: state.totalPrice\n    }\n};\nexport default connect(mapStateToProps)(ContactData);","import React, {Component} from 'react';\nimport { Route } from 'react-router-dom';\nimport {connect} from 'react-redux';\n\nimport CheckoutSummary from '../../Order/CheckoutSummary/CheckoutSummary';\nimport ContactData from './ContactData/ContactData';\n\nclass Checkout extends Component {\n\n    checkoutCancelledHandler = () => {\n        this.props.history.goBack();\n    };\n\n    checkoutContinuedHandler = () => {\n        this.props.history.replace('/checkout/contact-data');\n    };\n\n    render () {\n        return (\n            <>\n                <CheckoutSummary \n                    ingredients={this.props.ings}\n                    checkoutCancelled={this.checkoutCancelledHandler}\n                    checkoutContinued={this.checkoutContinuedHandler}/>\n                <Route \n                    path={this.props.match.path + '/contact-data'}\n                    component={ContactData} /> \n            </>\n\n        )\n    }\n};\n\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.ingredients\n    }\n};\n\nexport default connect(mapStateToProps)(Checkout);","import React from 'react';\n\nconst order = (props) => {\n    const ingredients = [];\n    for (let ingredientName in props.ingredients) {\n        ingredients.push(\n            {name: ingredientName, \n                amount: props.ingredients[ingredientName]})\n    }\n\n    const ingredientOutput = ingredients.map(ig => {\n    return <span \n        style={{\n            textTransform: 'capitalize', \n            display: 'block', \n            margin: '0 8px', \n            border: '1px solid #ccc',\n            padding: '5px'}}\n        key={ig.name}>{ig.name} {ig.amount}</span>\n    });\n    return (\n        <div className='Order'>\n            <p>Ingredients: {ingredientOutput}</p>\n            <p>Price: PLN {Number.parseFloat(props.price.toFixed(2))}</p>\n        </div>\n    )\n};\n\nexport default order;","import React, { Component } from 'react';\n\nimport Order from '../../../../components/Order/Order';\n\nclass Orders extends Component {\n    state = {\n        orders: [],\n        loading: true\n    }\n    componentDidMount() {\n        fetch('http://localhost:3000/orders')\n        .then(response => response.json())\n        .then (resp => {\n            console.log(resp)\n            const fetchedOrders = [];\n            for (let key in resp) {\n                fetchedOrders.push({\n                    ...resp[key], id: key\n                })\n            }\n            this.setState({loading: false});\n        })\n        .catch(err => {\n            this.setState({loading: false});\n        })\n    }\n    render() {\n        return(\n            <>\n                {this.state.orders.map(order => (\n                    <Order \n                    key={order.id}\n                    ingredients={order.ingredients}\n                    price={+order.price}/>\n                ))}\n            </>\n\n        );\n    }\n};\n\nexport default Orders;","import React from 'react';\nimport { Route, Switch} from 'react-router-dom';\n\nimport Layout from './components/Layout/Layout';\nimport BurgerBuilder from './components/containers/BurgerBuilder/BurgerBuilder';\nimport Checkout from './components/containers/Checkout/Checkout';\nimport Orders from './components/containers/container/Orders/Orders';\n\nfunction App() {\n  return(\n    <>\n      <Layout>\n        <Switch>\n          <Route path='/checkout' component={Checkout} />\n          <Route path='/orders' component={Orders} />\n          <Route path='/' exact component={BurgerBuilder} />\n        </Switch>\n      </Layout>\n    </>\n  )\n\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from './actions';\n\nconst initialStore = {\n    ingredients: {\n        salad: 0,\n        bacon: 0,\n        cheese:0,\n        meat: 0\n    },\n    totalPrice: 4\n};\n\nconst ingrednient_prices = {\n    salad: 0.4,\n    cheese: 0.5,\n    meat: 1.3,\n    bacon: 0.7\n}\n\nconst reducer = (state = initialStore, action) => {\n    switch(action.type) {\n        case actionTypes.ADD_INGREDIENT:\n            return {\n                ...state,\n                ingredients: {\n                    ...state.ingredients,\n                    [action.ingredientName]: state.ingredients[action.ingredientName] + 1\n                },\n                totalPrice: state.totalPrice + ingrednient_prices[action.ingredientName]\n\n            };\n        case actionTypes.REMOVE_INGREDIENT:\n            return {\n                ...state,\n                ingredients: {\n                    ...state.ingredients,\n                    [action.ingredientName]: state.ingredients[action.ingredientName] - 1\n                },\n                totalPrice: state.totalPrice - ingrednient_prices[action.ingredientName]\n\n            };\n        default:\n            return state;\n    };  \n};\n\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"./scss/main.scss\";\nimport {BrowserRouter} from 'react-router-dom';\nimport {Provider} from 'react-redux';\nimport {createStore} from 'redux';\nimport reducer from './store/reducer';\n\n\nconst store = createStore(reducer);\n\nconst app = (\n    <Provider store={store}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </Provider>\n\n)\nReactDOM.render( app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}