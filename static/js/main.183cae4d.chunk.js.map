{"version":3,"sources":["assets/images/burger-logo.png","components/Burger/Logo/Logo.js","components/Navigation/NavigationItems/NavigationItem/NavigationItem.js","components/Navigation/NavigationItems/NavigationItems.js","components/Navigation/SideDrawer/DrawerToggle/DrawerToggle.js","components/Navigation/Toolbar/Toolbar.js","components/Layout/Backdrop/Backdrop.js","components/Navigation/SideDrawer/SideDrawer.js","components/Layout/Layout.js","components/Layout/Spinner/Spinner.js","components/Burger/BurgerIngredient/BurgerIngredient.js","components/Burger/Burger.js","components/Burger/BuildControls/BuildControl/BuildControl.js","components/Burger/BuildControls/BuildControls.js","components/Layout/Modal/Modal.js","components/Layout/Button/Button.js","components/Burger/OrderSummary/OrderSummary.js","store/actions/auth.js","store/actions/actionTypes.js","components/containers/BurgerBuilder/BurgerBuilder.js","store/actions/burgerBuilder.js","store/actions/order.js","components/Order/CheckoutSummary/CheckoutSummary.js","components/Layout/Input/Input.js","components/containers/Checkout/ContactData/ContactData.js","components/containers/Checkout/Checkout.js","components/Order/Order.js","components/containers/container/Orders/Orders.js","components/Auth/Auth.js","components/Auth/Logout/Logout.js","App.js","serviceWorker.js","store/reducers/burgerBuilder.js","store/reducers/order.js","store/utility.js","store/reducers/auth.js","store/sagas/auth.js","store/sagas/burgerBuilder.js","store/sagas/order.js","store/sagas/index.js","index.js"],"names":["module","exports","logo","props","className","style","height","src","burgerLogo","alt","navigationItem","to","link","exact","activeClassName","children","navigationItems","NavigationItem","checkPropTypes","isAuthenticated","drawerToggle","onClick","clicked","toolbar","DrawerToggle","drawerToggleClicked","Logo","NavigationItems","isAuth","backdrop","show","sideDrawer","attachedClasses","open","Backdrop","closed","join","Layout","state","showSideDrawer","sideDrawerClosedHandler","setState","sideDrawerToggleHandler","prevState","Toolbar","this","SideDrawer","Component","connect","auth","token","spinner","BurgerIngredient","ingredient","type","burger","transformedIngredients","Object","keys","ingredients","map","igKey","Array","_","i","key","reduce","arr","el","concat","length","buildControl","label","removed","disabled","added","controls","buildControls","price","toFixed","ctrl","BuildControl","ingrinientAdded","ingredientRemoved","purchasable","ordered","modal","modalClosed","transform","opacity","button","btnType","orderSummary","ingredientSummary","textTransform","Button","purchaseCancelled","purchaseContinued","authSuccess","userId","idToken","checkAuthTimeout","expirationTime","setAuthRedirectPath","path","BurgerBuilder","purchasing","purchaseHandler","onSetAuthRedirectPath","history","push","purchaseCancelHandler","purchaseContinueHandler","onInitPurchase","onInitIngredients","sum","disabledInfo","ings","error","Spinner","Burger","BuildControls","onIngridientAdded","onIngridientRemoved","updatePurchaseState","OrderSummary","Modal","burgerBuilder","totalPrice","dispatch","ingName","ingredientName","actions","Axios","checkoutSummary","width","margin","checkoutCancelled","checkoutContinued","input","inputElement","inputClasses","invalid","shouldValidate","touched","elementType","elementConfig","value","onChange","changed","options","option","displayValue","ContactData","orderForm","name","placeholder","validation","required","valid","street","zipCode","minLength","maxLength","isNumeric","email","isEmail","deliveryMethod","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifer","order","orderData","onOrderBurger","inputChangedHandler","inputIdentifier","updatedOrderForm","updatedFormElement","target","checkValidity","rules","isValid","trim","test","formElementsArray","id","config","form","onSubmit","formElement","Input","loading","Checkout","checkoutCancelledHandler","goBack","checkoutContinuedHandler","replace","summary","purchasedRedirect","purchased","CheckoutSummary","match","component","amount","ingredientOutput","ig","display","border","padding","Number","parseFloat","Orders","onFetchOrders","console","log","orders","Order","Auth","isemail","password","minLenght","isSignup","controlName","updatedControls","submitHandler","onAuth","swithAuthModeHandler","buildingBurger","authRedirectPath","onSetRedirectPath","errorMessage","message","authRedirect","building","Logout","onLogout","App","onTryAutoSignup","routes","withRouter","Boolean","window","location","hostname","initialStore","ingrednient_prices","salad","cheese","meat","bacon","reducer","action","initialState","newOrder","orderId","updateObject","oldObject","updatedProperties","authStart","authFail","authLogout","logoutSaga","checkAuthTimeoutSaga","authUserSaga","authCheckStateSaga","localStorage","removeItem","put","delay","authData","returnSecureToken","url","axios","post","response","Date","getTime","data","expiresIn","expirationDate","setItem","localId","getItem","initIngredientsSaga","get","purchaseBurgerSaga","fetchOrdersSaga","queryParams","fetchedOrders","watchAuth","watchBurgerBuilder","watchOrder","takeEvery","composeEnhancers","compose","rootReducer","combineReducers","burgerBuilderReducer","orderReducer","authReducer","sagaMiddlewere","createSagaMiddlewere","store","createStore","applyMiddleware","thunk","run","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.183cae4d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/burger-logo.b8503d26.png\";","import React from 'react';\n\nimport burgerLogo from '../../../assets/images/burger-logo.png';\n\nconst logo = (props) => (\n    <div className='Logo'\n        style={{height: props.height}}>\n        <img src={burgerLogo} alt='BurgerBuilder'/>\n    </div>\n\n);\n\nexport default logo;","import React from 'react';\nimport {NavLink} from 'react-router-dom'\n\nconst navigationItem = (props) => (\n    <li className='NavigationItem'>\n        <NavLink \n        to={props.link}\n        exact\n        activeClassName='active'>{props.children}</NavLink></li>\n);\n\nexport default navigationItem;","import { checkPropTypes } from 'prop-types';\nimport React from 'react';\n\nimport NavigationItem from './NavigationItem/NavigationItem'\n\nconst navigationItems = (props) => (\n    <ul className='NavigationItems'>\n        < NavigationItem link='/BurgerBuilder' exact={checkPropTypes.exact} >Burger Builder</ NavigationItem>\n        {props.isAuthenticated ? < NavigationItem link='/orders'>Orders</ NavigationItem> : null}\n        { !props.isAuthenticated \n        ?< NavigationItem link='/auth'>Login</ NavigationItem> \n        : < NavigationItem link='/logout'>Logout</ NavigationItem>}\n    </ul>\n);\n\nexport default navigationItems;","import React from 'react';\n\nconst drawerToggle = (props) => (\n    <div className='DrawerToggle' onClick={props.clicked}>\n        <div></div>\n        <div></div>\n        <div></div>\n    </div>\n);\n\nexport default drawerToggle;","import React from 'react';\n\nimport Logo from '../../Burger/Logo/Logo';\nimport NavigationItems from '../NavigationItems/NavigationItems';\nimport DrawerToggle from '../SideDrawer/DrawerToggle/DrawerToggle';\n\n\nconst toolbar = props => (\n    <header className='Toolbar'>\n        <DrawerToggle clicked={props.drawerToggleClicked}/>\n        < Logo height='80%'/>\n        <nav className='DesktopOnly'>\n            <NavigationItems isAuthenticated={props.isAuth}/>\n        </nav>\n    </header>\n);\n\nexport default toolbar;","import React from 'react';\n\nconst backdrop = (props) => (\n    props.show ? <div className='Backdrop' onClick={props.clicked}></div> : null\n);\n\nexport default backdrop;","import React from 'react';\n\nimport Backdrop from '../../Layout/Backdrop/Backdrop';\n\nimport Logo from '../../Burger/Logo/Logo';\nimport NavigationItems from '../NavigationItems/NavigationItems';\n\nconst sideDrawer = (props) => {\n    let attachedClasses = ['SideDrawer', 'Close'];\n    if (props.open) {\n        attachedClasses = ['SideDrawer', 'Open']\n    }\n\n    return(\n        <>\n            <Backdrop show={props.open} clicked={props.closed}/>\n            <div className={attachedClasses.join(' ')} onClick={props.closed}>\n                <Logo height='11%'/>\n                <nav>\n                    <NavigationItems isAuthenticated={props.isAuth}/>\n                </nav>\n            </div>\n        </>\n\n    );\n};\n\nexport default sideDrawer;","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\n\nimport Toolbar from '../../components/Navigation/Toolbar/Toolbar';\nimport SideDrawer from '../Navigation/SideDrawer/SideDrawer';\n\nclass Layout extends Component {\n    state = {\n        showSideDrawer: false\n    }\n\n    sideDrawerClosedHandler = () => {\n        this.setState({showSideDrawer: false});\n    }\n\n    sideDrawerToggleHandler = () => {\n        this.setState((prevState) => { return {showSideDrawer: !prevState.showSideDrawer}\n    });\n    }\n    render() {\n        return (\n            <div>\n                <Toolbar \n                drawerToggleClicked={this.sideDrawerToggleHandler}\n                isAuth={this.props.isAuthenticated}/>\n                <SideDrawer \n                    open={this.state.showSideDrawer} \n                    closed={this.sideDrawerClosedHandler}\n                    isAuth={this.props.isAuthenticated}/>\n                <main className='content'>\n                    {this.props.children}\n                </main>\n             </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isAuthenticated: state.auth.token !== null\n    };\n};\n\nexport default connect(mapStateToProps)(Layout);","import React from 'react';\n\nconst spinner = () => (\n    <div className=\"Loader\">Loading...</div>\n);\n\nexport default spinner;","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nclass BurgerIngredient extends Component {\n    render(){\n\n        let ingredient = null;\n        \n        switch (this.props.type) {\n            case ('bread-bottom'):\n                ingredient = <div className='BreadBottom'></div>\n                break;\n            case ('bread-top'):\n                ingredient = (\n                    <div className='BreadTop'>\n                        <div className='Seeds1'></div>\n                        <div className='Seeds2'></div>\n                    </div>\n                );\n                break;\n            case ('meat'):\n                ingredient = <div className='Meat'></div>\n                break;\n                case ('cheese'):\n                    ingredient = <div className='Cheese'></div>\n                    break; \n                case ('salad'):\n                    ingredient = <div className='Salad'></div>\n                    break;      \n                case ('bacon'):\n                    ingredient = <div className='Bacon'></div>\n                    break;\n                default:\n                    ingredient = null;\n        }\n        return ingredient;\n    }\n};\n\nBurgerIngredient.propTypes = {\n    type: PropTypes.string.isRequired\n};\n\nexport default BurgerIngredient;","import React from 'react';\n\nimport BurgerIngredient from './BurgerIngredient/BurgerIngredient'\n\nconst burger = (props) => {\n    let transformedIngredients = Object.keys(props.ingredients).map(igKey => {\n        return [...Array(props.ingredients[igKey])].map((_, i) => {\n            return <BurgerIngredient key={igKey + i} type={igKey} />\n        });\n    })\n    .reduce((arr,el) => {\n        return arr.concat(el)\n    }, []);\n    if (transformedIngredients.length === 0) {\n        transformedIngredients = <p>Please start adding ingredients</p>\n    }\n    return (\n        <div className='Burger'>\n            <BurgerIngredient type='bread-top'/>\n            {transformedIngredients}\n            <BurgerIngredient type='bread-bottom'/>\n        </div>\n    );\n};\n\nexport default burger;","import React from 'react';\n\nconst buildControl = (props) => (\n    <div className='BuildControl'>\n        <div className='Label'>{props.label}</div>\n        <button \n            className='Less' \n            onClick={props.removed} \n            disabled={props.disabled}>Less</button>\n        <button \n            className='More' \n            onClick={props.added}>More</button>\n    </div>\n);\n\nexport default buildControl;","import React from 'react';\n\nimport BuildControl from './BuildControl/BuildControl'\n\nconst controls = [\n    {label: 'Salad', type: 'salad'},\n    {label: 'Bacon', type: 'bacon'},\n    {label: 'Cheese', type: 'cheese'},\n    {label: 'Meat', type: 'meat'},\n];\nconst buildControls = (props) => (\n    <div className='BuildControls'>\n        <p>Current Price: <strong>{props.price.toFixed(2)}</strong></p>\n        {controls.map(ctrl => (\n            <BuildControl \n            key={ctrl.label} \n            label={ctrl.label}\n            added= {()=>props.ingrinientAdded(ctrl.type)}\n            removed= {()=>props.ingredientRemoved(ctrl.type)}\n            disabled = {props.disabled[ctrl.type]} />\n        ))}\n        <button \n        className='OrderButton'\n        disabled={!props.purchasable}\n        onClick={props.ordered}>{props.isAuth ? 'ORDER NOW' : 'LOGIN TO ORDER'}</button>\n    </div>\n\n);\n\nexport default buildControls;","import React from 'react';\n\nimport Backdrop from '../Backdrop/Backdrop'\nconst modal = (props)  => (\n    <>\n        <Backdrop show={props.show} clicked={props.modalClosed}/>\n        <div \n            className='Modal'\n            style={{transform: props.show ? 'translateY(0)' : 'translateY(-100vh)',\n            opacity: props.show ? '1' : '0'\n            }}>\n            {props.children}\n        </div>\n    </>\n    \n);\n\nexport default modal;","import React from 'react';\n\nconst button = (props) => (\n<button \nonClick={props.clicked}\ndisabled={props.disabled}\nclassName={[props.btnType, 'Button'].join(' ')} >{props.children}</button>\n);\n\nexport default button;","import React from 'react';\n\nimport Button from '../../Layout/Button/Button'\n\nconst orderSummary = (props) => {\n    const ingredientSummary = Object.keys(props.ingredients).map(igKey => {\n        return (<li key={igKey}><span style={{textTransform: 'capitalize'}}>{igKey}</span>: {props.ingredients[igKey]}</li>);\n    });\n    return (\n        <>\n            <h2>Your Order</h2>\n            <p>A delicious burger with the following integridients:</p>\n            <ul>\n                {ingredientSummary}\n            </ul>\n            <p><strong>Total price: {props.price.toFixed(2)}</strong></p>\n            <p>Continue to Checkout?</p>\n            <Button btnType='Danger' clicked={props.purchaseCancelled}>CANCEL</Button>\n            <Button btnType='Success' clicked={props.purchaseContinued}>CONTINUE</Button>\n        </>\n    )\n};\n\nexport default orderSummary;","import * as actionTypes from './actionTypes';\n\nexport const authStart = () => {\n    return {\n        type: actionTypes.AUTH_START\n    };\n};\n\nexport const authSuccess = (token, userId) => {\n    return {\n        type: actionTypes.AUTH_SUCCESS,\n        idToken: token,\n        userId: userId\n    };\n};\n\nexport const authFail = (error) => {\n    return {\n        type: actionTypes.AUTH_FAIL,\n        error: error\n    };\n};\n\nexport const logout = () => {\n    // localStorage.removeItem('token');\n    // localStorage.removeItem('expirationDate');\n    // localStorage.removeItem('userId');\n    return {\n        type: actionTypes.AUTH_INITIATE_LOGOUT\n    }\n};\n\nexport const logoutSucceed = () => {\n    return {\n        type: actionTypes.AUTH_LOGOUT\n    };\n};\n\nexport const checkAuthTimeout = (expirationTime) => {\n    // return dispatch => {\n    //     setTimeout(() => {\n    //         dispatch(logout());\n    //     }, expirationTime * 1000);\n    // };\n    return {\n        type: actionTypes.AUTH_CHECK_TIMEOUT,\n        expirationTime: expirationTime\n    }\n};\n\nexport const auth = (email, password, isSignup) => {\n    return {\n        type: actionTypes.AUTH_USER,\n        email: email,\n        password: password,\n        isSignup: isSignup\n    }\n};\n\nexport const setAuthRedirectPath = (path) => {\n    return {\n        type: actionTypes.SET_AUTH_REDIRECT_PATH,\n        path: path\n    }\n}\n\nexport const authCheckState = () => {\n    return {\n        type: actionTypes.AUTH_CHECK_STATE\n    };\n};","export const ADD_INGREDIENT = 'ADD_INGREDIENT';\nexport const REMOVE_INGREDIENT = 'REMOVE_INGREDIENT';\nexport const SET_INGREDIENTS = 'SET_INGREDIENTS';\nexport const INIT_INGREDIENTS = 'NIT_INGREDIENTS';\nexport const FETCH_INGRENIENTS_FAILED = 'FETCH_INGRENIENTS_FAILED';\n\nexport const PURCHASE_BURGER = 'PURCHASE_BURGER';\nexport const PURCHASE_BURGER_SUCCES = 'PURCHASE_BURGER_SUCCES';\nexport const PUTCHASE_BURGER_FAIL = 'PUTCHASE_BURGER_FAIL';\nexport const PURCHASE_BURGER_START = 'PURCHASE_BURGER_START';\nexport const PURCHASE_INIT = 'PURCHASE_INIT';\n\nexport const AUTH_CHECK_STATE = 'AUTH_CHECK_STATE';\nexport const AUTH_USER = 'AUTH_USER';\nexport const FETCH_ORDERS_START = 'FETCH_ORDERS_START';\nexport const FETCH_ORDERS_SUCCESS = 'FETCH_ORDERS_SUCCESS';\nexport const FETCH_ORDERS_FAIL = 'FETCH_ORDERS_FAIL';\nexport const AUTH_CHECK_TIMEOUT = 'AUTH_CHECK_TIMEOUT';\n\nexport const FETCH_ORDERS = 'FETCH_ORDERS';\nexport const AUTH_START = 'AUTH_START';\nexport const AUTH_SUCCESS = 'AUTH_SUCCESS';\nexport const AUTH_FAIL = 'AUTH_FAIL';\nexport const AUTH_LOGOUT = 'AUTH_LOGOUT';\nexport const AUTH_INITIATE_LOGOUT = 'AUTH_INITIATE_LOGOUT';\n\nexport const SET_AUTH_REDIRECT_PATH = 'SET_AUTH_REDIRECT_PATH';","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport Spinner from '../../Layout/Spinner/Spinner';\nimport Burger from '../../Burger/Burger';\nimport BuildControls from '../../../components/Burger/BuildControls/BuildControls';\nimport Modal from '../../Layout/Modal/Modal';\nimport OrderSummary from '../../Burger/OrderSummary/OrderSummary';\nimport * as actions from '../../../store/actions/index';\nimport Axios from 'axios';\n\n\n\nclass BurgerBuilder extends Component {\n    state = {\n        purchasing: false\n    }\n\n    componentDidMount () {\n        this.props.onInitIngredients();\n    }\n\n    updatePurchaseState (ingredients) {\n        const sum = Object.keys(ingredients).map (igKey => {\n            return ingredients[igKey]\n        }).reduce((sum, el) => {\n            return sum + el;\n        })\n        return sum > 0;\n    }\n\n\n    purchaseHandler = () => {\n        if (this.props.isAuthenticated) {\n            this.setState({purchasing: true});\n        }else {\n            this.props.onSetAuthRedirectPath('/checkout');\n            this.props.history.push('/auth');\n        }\n        \n    }\n\n    purchaseCancelHandler = () => {\n        this.setState({purchasing: false});\n    }\n\n    purchaseContinueHandler = () => {\n        this.props.onInitPurchase(); \n        this.props.history.push('/checkout');\n    }\n\n    render (){\n        const disabledInfo = {\n            ...this.props.ings\n        }\n        for (let key in disabledInfo) {\n            disabledInfo[key] = disabledInfo[key] <= 0\n        }\n            //zwraca true lub false {salad: true, meat: false, ...}\n            let orderSummary = null;\n            let burger = this.props.error ? <p>Ingredients can't be loaded!</p> : <Spinner />;\n            \n            if (this.props.ings) {\n                burger = (\n                    <>\n                < Burger ingredients={this.props.ings}/>\n                < BuildControls \n                    ingrinientAdded = {this.props.onIngridientAdded}\n                    ingredientRemoved = {this.props.onIngridientRemoved}\n                    disabled = {disabledInfo}\n                    price = {this.props.price}\n                    purchasable = {this.updatePurchaseState(this.props.ings)}\n                    ordered={this.purchaseHandler}\n                    isAuth={this.props.isAuthenticated}/>\n                    </>\n                );\n                    orderSummary = (\n                        <OrderSummary \n                        ingredients={this.props.ings}\n                        purchaseCancelled={this.purchaseCancelHandler}\n                        purchaseContinued={this.purchaseContinueHandler}\n                        price={this.props.price}/>\n                    )\n            };\n\n        return (\n            <>\n                <Modal \n                show={this.state.purchasing}\n                modalClosed={this.purchaseCancelHandler}>\n                    {orderSummary}\n                </Modal>\n                {burger}\n            </>\n        );\n    }\n};\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,   // mamy dwa reduktory więc wybieramy właściwy -> state.burgerBuilder\n        price: state.burgerBuilder.totalPrice,\n        error: state.burgerBuilder.error,\n        isAuthenticated: state.auth.token !== null\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onIngridientAdded: (ingName) => dispatch(actions.addIngredient(ingName)),\n        onIngridientRemoved: (ingName) => dispatch(actions.removeIngredient(ingName)),\n        onInitIngredients: () => dispatch(actions.initIngredients()),\n        onInitPurchase: () => dispatch(actions.purchaseInit()),\n        onSetAuthRedirectPath: (path) => dispatch(actions.setAuthRedirectPath(path))\n    }    \n}\nexport default connect(mapStateToProps, mapDispatchToProps)(BurgerBuilder, Axios);","import * as actionTypes from './actionTypes';\n\nexport const addIngredient = (name) => {\n    return {\n        type: actionTypes.ADD_INGREDIENT,\n        ingredientName: name\n    };\n};\n\nexport const removeIngredient = (name) => {\n    return {\n        type: actionTypes.REMOVE_INGREDIENT,\n        ingredientName: name\n    };\n};\n\nexport const setIngrenients = (ingredients) => {\n    return {\n        type: actionTypes.SET_INGREDIENTS,\n        ingredients: ingredients\n    };\n};\n\nexport const fetchIngredientsFailed = () => {\n    return {\n        type: actionTypes.FETCH_INGRENIENTS_FAILED\n    };\n};\nexport const initIngredients = () => {\n    return {\n        type: actionTypes.INIT_INGREDIENTS\n    };\n};","import * as actionsType from './actionTypes';\n\nexport const purchaseBurgerSuccess = (id, orderData) => {\n    return {\n        type: actionsType.PURCHASE_BURGER_SUCCES,\n        orderId: id,\n        orderData: orderData\n    };\n};\n\nexport const purchaseBurgerFail = (error) => {\n    return {\n        type: actionsType.PUTCHASE_BURGER_FAIL,\n        error: error\n    };\n};\n\nexport const purchaseBurgerStart = () => {\n    return {\n        type: actionsType.PURCHASE_BURGER_START\n    };\n};\n\nexport const purchaseBurger = ( orderData, token ) => {\n    return {\n        type: actionsType.PURCHASE_BURGER,\n        orderData: orderData,\n        token: token\n    }\n\n};\n\nexport const purchaseInit = () => {\n    return {\n        type: actionsType.PURCHASE_INIT\n    };\n};\n\nexport const fetchOrderStart = () => {\n    return {\n        type: actionsType.FETCH_ORDERS_START\n    };\n};\n\nexport const fetchOrderSucces= (orders) => {\n    return {\n        type: actionsType.FETCH_ORDERS_SUCCESS,\n        orders: orders\n    };\n};\n\nexport const fetchOrderFail= (error) => {\n    return {\n        type: actionsType.FETCH_ORDERS_FAIL,\n        error: error\n    };\n};\n\nexport const fetchOrders = (token, userId) => {\n    return {\n        type: actionsType.FETCH_ORDERS,\n        token: token,\n        userId: userId\n    };\n};","import React from 'react';\n\nimport Burger from '../../Burger/Burger';\nimport Button from '../../Layout/Button/Button';\n\nconst checkoutSummary = (props) => {\n    return (\n        <div className='CeckoutSummary'>\n            <h1>We hope it tastes well!</h1>\n            <div style={{width: '100%', margin: 'auto'}}>\n                <Burger ingredients= {props.ingredients}/>\n            </div>\n            <Button \n            btnType='Danger'\n            clicked={props.checkoutCancelled}\n            >CANCEL</Button>\n            <Button \n            btnType='Success'\n            clicked={props.checkoutContinued}\n            >CONTINUE</Button>\n        </div>\n    );\n};\n\nexport default checkoutSummary;","import React from 'react';\n\nconst input = (props) => {\n    let inputElement = null;\n    const inputClasses = [inputElement];\n\n    if (props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push('Invalid');\n    }\n    switch (props.elementType) {\n        case ( 'input'):\n            inputElement = <input \n                className={inputClasses.join(' ')} \n                {...props.elementConfig} \n                value={props.value} \n                onChange={props.changed}/>;\n            break;\n        case ( 'trxtarea'):\n            inputElement = <textarea \n                className='InputElement' \n                {...props.elementConfig} \n                value={props.value} \n                onChange={props.changed}/>;\n            break;\n        case ( 'select'):\n             inputElement = \n                <select \n                    className='InputElement' \n                    value={props.value} \n                    onChange={props.changed}>\n                    {props.elementConfig.options.map(option => (\n                        <option key={option.value} value={option.value}>\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>;\n            break;    \n        default:\n            inputElement = <input \n                className='InputElement' \n                {...props.elementConfig} \n                value={props.value} \n                onChange={props.changed}/> \n    }\n\n    return (\n        <div className='Input'>\n            <label className='Label'>{props.label}</label>\n            {inputElement}\n        </div>\n    );\n};\n\nexport default input;","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport Button from '../../../../components/Layout/Button/Button';\nimport Input from '../../../Layout/Input/Input';\nimport Spinner from '../../../Layout/Spinner/Spinner';\nimport * as actions from '../../../../store/actions/index';\n\n\nclass ContactData extends Component {\n    state = {\n        orderForm: {\n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Name',\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            street:  {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Street',\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                    valid: false,\n                    touched: false\n            },\n            zipCode: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'ZIP Code'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 5,\n                    maxLength: 5,\n                    isNumeric: true\n                },\n                valid: false,\n                touched: false\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Your E-Mail'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n            },\n            deliveryMethod: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        {value: 'fastest', displayValue: 'Fastest'},\n                        {value: 'cheapest', displayValue: 'Cheapest'}]\n                },\n                value: 'fastest',\n                validation: {}, // usuwa błąd walidacji przy wyborze opcji\n                valid: true\n            }\n        },\n        formIsValid: false\n    }\n\n    orderHandler = (event) => {\n        event.preventDefault();\n        const formData = {};\n        for (let formElementIdentifer in this.state.orderForm) {\n            formData[formElementIdentifer] = this.state.orderForm[formElementIdentifer].value;\n        }\n        const order = {\n            ingredients: this.props.ings,\n            price: this.props.price,\n            orderData: formData,\n            userId: this.props.userId\n        };\n        \n        this.props.onOrderBurger(order, this.props.token);\n    };\n\n    checkValidity(value, rules) {\n        let isValid = true;\n        if (!rules) {\n            return true;\n        }\n        \n        if (rules.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n\n        if (rules.minLength) {\n            isValid = value.length >= rules.minLength && isValid\n        }\n\n        if (rules.maxLength) {\n            isValid = value.length <= rules.maxLength && isValid\n        }\n\n        if (rules.isEmail) {\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        if (rules.isNumeric) {\n            const pattern = /^\\d+$/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        return isValid;\n    }\n\n    inputChangedHandler = (event, inputIdentifier) => {\n        const updatedOrderForm = {\n            ...this.state.orderForm\n        }\n        // klonuję stan ale bez klonowania głębokiego, nie mam dostępu do wartości wewnątrz name, street itd\n        // muszę sklonować je osobno:    , teraz mam dostęp do elementType, value nie mam do elementConfig \n        let updatedFormElement = {\n            ...updatedOrderForm[inputIdentifier]\n        }\n        updatedFormElement.value = event.target.value;\n        updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n        updatedFormElement.touched = true;\n        updatedOrderForm[inputIdentifier] = updatedFormElement;\n               \n        let formIsValid = true;\n        for (let inputIdentifier in updatedOrderForm) {\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n        }\n        this.setState({orderForm: updatedOrderForm, formIsValid: formIsValid});\n    };\n\n\n    render () {\n        const formElementsArray = [];\n        for (let key in this.state.orderForm) {\n            formElementsArray.push({\n                id:key,\n                config: this.state.orderForm[key]\n            })\n        }\n\n        let form = (\n            <form onSubmit={this.orderHandler}>\n                {formElementsArray.map(formElement => (\n                    <Input \n                        key={formElement.id}\n                        elementType={formElement.config.elementType}\n                        elementConfig={formElement.config.elementConfig}\n                        value={formElement.config.value}\n                        invalid={!formElement.config.valid}\n                        shouldValidate={formElement.config.validation}\n                        touched={formElement.config.touched}\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)}/>\n                ))}\n                <Button btnType='Success' disabled={!this.state.formIsValid} clicked={this.orderHandler}>ORDER</Button>\n        </form>\n        );\n        if (this.props.loading) {\n            form = <Spinner />\n        }\n        return (\n            <div className='ContactData'>\n                <h4>Enter your Contact Data</h4>\n            {form}\n            </div>\n        );\n    }\n};\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,   // mamy dwa reduktory więc wybieramy właściwy -> state.burgerBuilder\n        price: state.burgerBuilder.totalPrice,\n        loading: state.order.loading,\n        token: state.auth.token,\n        userId: state.auth.userId\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactData);","import React, {Component} from 'react';\nimport { Redirect, Route } from 'react-router-dom';\nimport {connect} from 'react-redux';\n\nimport CheckoutSummary from '../../Order/CheckoutSummary/CheckoutSummary';\nimport ContactData from './ContactData/ContactData';\n\nclass Checkout extends Component {\n\n    checkoutCancelledHandler = () => {\n        this.props.history.goBack();\n    };\n\n    checkoutContinuedHandler = () => {\n        this.props.history.replace('/checkout/contact-data');\n    };\n\n    render () {\n        let summary = <Redirect to=\"/BurgerBuilder\"/>\n        if (this.props.ings) {\n            const purchasedRedirect = this.props.purchased ? <Redirect to=\"/BurgerBuilder\" /> : null\n            summary = (\n                <>\n                    {purchasedRedirect}\n                    <CheckoutSummary \n                        ingredients={this.props.ings}\n                        checkoutCancelled={this.checkoutCancelledHandler}\n                        checkoutContinued={this.checkoutContinuedHandler}/>\n                    <Route \n                        path={this.props.match.path + '/contact-data'}\n                        component={ContactData} />\n                </> );\n        };\n        return summary\n    };\n};\n\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,    // mamy dwa reduktory więc wybieramy właściwy -> state.burgerBuilder\n        purchased: state.order.purchased\n    }\n};\n\nexport default connect(mapStateToProps)(Checkout);","import React from 'react';\n\nconst order = (props) => {\n    const ingredients = [];\n    for (let ingredientName in props.ingredients) {\n        ingredients.push(\n            {name: ingredientName, \n                amount: props.ingredients[ingredientName]})\n    }\n\n    const ingredientOutput = ingredients.map(ig => {\n    return <span \n        style={{\n            textTransform: 'capitalize', \n            display: 'inline-block', \n            margin: '0 8px', \n            border: '1px solid #ccc',\n            padding: '5px'}}\n        key={ig.name}>{ig.name} {ig.amount}</span>\n    });\n    return (\n        <div className='Order'>\n            <p>Ingredients: {ingredientOutput}</p>\n            <p>Price: PLN {Number.parseFloat(props.price.toFixed(2))}</p>\n        </div>\n    )\n};\n\nexport default order;","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\n\nimport Order from '../../../../components/Order/Order';\nimport * as actions from '../../../../store/actions/index';\nimport Spinner from '../../../Layout/Spinner/Spinner';\n\nclass Orders extends Component {\n    \n    componentDidMount() {\n        this.props.onFetchOrders(this.props.token, this.props.userId);\n    }\n    render() {\n        console.log(this.props.orders)\n        let orders = <Spinner />;\n        if (!this.props.loading){\n            orders = ( this.props.orders.map(order => (\n                    <Order \n                    key={order.id}\n                    ingredients={order.ingredients}\n                    price={+order.price}/>\n                ))\n            );\n        }\n        return (\n            <>\n                {orders}\n            </>\n        );\n    }\n};\n\nconst mapStateToProps = state => {\n    return {\n        orders: state.order.orders,\n        loading: state.order.loading,\n        token: state.auth.token,\n        userId: state.auth.userId\n    }\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        onFetchOrders: (token, userId) => dispatch(actions.fetchOrders(token, userId)) \n    }\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Orders);","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport {Redirect} from 'react-router-dom';\n\nimport Input from '../Layout/Input/Input';\nimport Button from '../Layout/Button/Button';\nimport Spinner from '../Layout/Spinner/Spinner';\nimport * as actions from '../../store/actions/index';\n\nclass Auth extends Component {\n    state = {\n        controls: {\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Mail Address',\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isemail: true\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Password',\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLenght: 6\n                },\n                valid: false,\n                touched: false\n            }\n        },\n        isSignup: true\n    };\n\n    componentDidMount() {\n        if (!this.props.buildingBurger && this.props.authRedirectPath !== '/BurgerBuilder') {\n            this.props.onSetRedirectPath();\n        }\n    };\n\n    checkValidity(value, rules) {\n        let isValid = true;\n        if (!rules) {\n            return true;\n        }\n        \n        if (rules.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n\n        if (rules.minLength) {\n            isValid = value.length >= rules.minLength && isValid\n        }\n\n        if (rules.maxLength) {\n            isValid = value.length <= rules.maxLength && isValid\n        }\n\n        if (rules.isEmail) {\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        if (rules.isNumeric) {\n            const pattern = /^\\d+$/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        return isValid;\n    };\n\n    inputChangedHandler = (event, controlName) => {\n        const updatedControls = {\n            ...this.state.controls,\n            [controlName]: {\n                ...this.state.controls[controlName],\n                value: event.target.value,\n                valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\n                touched: true\n            }\n        };\n        this.setState({controls: updatedControls});\n    };\n\n    submitHandler = (event) => {\n        event.preventDefault();\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup)\n    };\n\n    swithAuthModeHandler = () => {\n        this.setState(prevState => {\n            return {isSignup: !prevState.isSignup};\n        });\n    };\n\n    render() {\n        const formElementsArray = [];\n        for (let key in this.state.controls) {\n            formElementsArray.push({\n                id:key,\n                config: this.state.controls[key]\n            });\n        };\n\n        let form = formElementsArray.map(formElement => (\n                < Input \n                    key={formElement.id}\n                    elementType={formElement.config.elementType}\n                    elementConfig={formElement.config.elementConfig}\n                    value={formElement.config.value}\n                    invalid={!formElement.config.valid}\n                    shouldValidate={formElement.config.validation}\n                    touched={formElement.config.touched}\n                    changed={(event) => this.inputChangedHandler(event, formElement.id)}/>\n        ) );\n\n        if (this.props.loading) {\n            form = <Spinner/>\n        }\n\n        let errorMessage = null;\n        if (this.props.error) {\n            errorMessage = (\n                <p>{this.props.error.message}</p>\n            );\n        };\n\n        let authRedirect = null;\n        if (this.props.isAuthenticated) {\n            authRedirect = <Redirect to={this.props.authRedirectPath}/>\n        }\n\n\n        return(\n            <div className='Auth'>\n                {authRedirect}\n                {errorMessage}\n                <form onSubmit={this.submitHandler}>\n                    {form}\n                    <Button btnType='Success'>SUBMIT</Button>\n                </form>\n        <Button\n            clicked={this.swithAuthModeHandler} \n            btnType='Danger'>{this.state.isSignup ? 'LOGIN' : 'SIGNUP'}\n        </Button>\n            </div>\n        );\n    };\n};\n\nconst mapStatrToProps = state => {\n    return {\n        loading: state.auth.loading,\n        error: state.auth.error,\n        isAuthenticated: state.auth.token !==null,\n        buildingBurger: state.burgerBuilder.building,\n        authRedirectPath: state.auth.authRedirectPath\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\n        onSetRedirectPath: () => dispatch(actions.setAuthRedirectPath('/burgerBuilder'))\n    };\n};\nexport default connect(mapStatrToProps, mapDispatchToProps)(Auth);","import React, { Component} from 'react';\nimport { connect } from 'react-redux';\nimport {Redirect} from 'react-router-dom';\n\nimport * as actions from '../../../store/actions/index';\nclass Logout extends Component {\n\n    componentDidMount () {\n        this.props.onLogout();\n    };\n    render () {\n        return <Redirect to='/BurgerBuilder'/>\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onLogout: () => dispatch(actions.logout())\n    };\n};\n\nexport default connect(null, mapDispatchToProps) (Logout);","import React, { Component } from 'react';\nimport { Route, Switch, withRouter, Redirect} from 'react-router-dom';\nimport {connect} from 'react-redux';\n\nimport Layout from './components/Layout/Layout';\nimport BurgerBuilder from './components/containers/BurgerBuilder/BurgerBuilder';\nimport Checkout from './components/containers/Checkout/Checkout';\nimport Orders from './components/containers/container/Orders/Orders';\nimport Auth from './components/Auth/Auth';\nimport Logout from './components/Auth/Logout/Logout';\nimport * as actions from './store/actions/index';\n\nclass App extends Component {\n  componentDidMount (){\n    this.props.onTryAutoSignup();\n  }\n  render() {\n\n    let routes = (\n      <Switch>\n        <Route path='/auth' component={Auth} />\n        <Route path='/BurgerBuilder' exact component={BurgerBuilder} />\n        <Redirect to='/BurgerBuilder' />\n    </Switch>\n    );\n    if (this.props.isAuthenticated) {\n      routes = (\n        <Switch>\n          <Route path='/checkout' component={Checkout} />\n          <Route path='/orders' component={Orders} />\n          <Route path='/logout' component={Logout} />\n          <Route path='/auth' component={Auth} />\n          <Route path='/BurgerBuilder' exact component={BurgerBuilder} />]\n          <Redirect to='/BurgerBuilder' />\n      </Switch>\n      );\n    }\n    return(\n      <>\n        <Layout>\n          {routes}\n        </Layout>\n      </>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    isAuthenticated: state.auth.token !== null\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    onTryAutoSignup: () => dispatch(actions.authCheckState())\n  }\n}\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from '../actions/actionTypes';\n\nconst initialStore = {\n    ingredients: null,\n    totalPrice: 4,\n    error: false,\n    building: false\n};\n\nconst ingrednient_prices = {\n    salad: 0.4,\n    cheese: 0.5,\n    meat: 1.3,\n    bacon: 0.7\n}\n\nconst reducer = (state = initialStore, action) => {\n    switch(action.type) {\n        case actionTypes.ADD_INGREDIENT:\n            return {\n                ...state,\n                ingredients: {\n                    ...state.ingredients,\n                    [action.ingredientName]: state.ingredients[action.ingredientName] + 1\n                },\n                totalPrice: state.totalPrice + ingrednient_prices[action.ingredientName],\n                building: true\n\n            };\n        case actionTypes.REMOVE_INGREDIENT:\n            return {\n                ...state,\n                ingredients: {\n                    ...state.ingredients,\n                    [action.ingredientName]: state.ingredients[action.ingredientName] - 1\n                },\n                totalPrice: state.totalPrice - ingrednient_prices[action.ingredientName],\n                building: true\n\n            };\n        case actionTypes.SET_INGREDIENTS:\n            return {\n                ...state,\n                ingredients: {\n                    salad: action.ingredients.salad,\n                    bacon: action.ingredients.bacon,\n                    cheese: action.ingredients.cheese,\n                    meat: action.ingredients.meat\n                },\n                error: false,\n                totalPrice: 4,\n                building: false\n            };\n        case actionTypes.FETCH_INGRENIENTS_FAILED:\n            return {\n                ...state,\n                error: true\n            }        \n        default:\n            return state;\n    };  \n};\n\nexport default reducer;","import * as actionTypes from '../actions/actionTypes';\n\n\nconst initialState = {\n    orders: [],\n    loading: false,\n    purchased: false\n}\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.PURCHASE_BURGER_START:\n            return {\n                ...state,\n                loading: true\n            };\n        case actionTypes.PURCHASE_BURGER_SUCCES:\n            const newOrder = {\n                ...action.orderData,\n                id: action.orderId\n            };\n            return {\n                ...state,\n                loading: false,\n                purchased: true,\n                orders: state.orders.concat(newOrder)\n            };\n        case actionTypes.FETCH_INGRENIENTS_FAILED:\n            return {\n                ...state,\n                loading: false \n            };\n        case actionTypes.PURCHASE_INIT:\n            return {\n                ...state,\n                purchased: false  \n            };    \n        case actionTypes.FETCH_ORDERS_START:\n            return {\n                ...state,\n                loading: true\n            };\n        case actionTypes.FETCH_ORDERS_SUCCESS:\n            return {\n                ...state,\n                orders: action.orders,\n                loading: false\n            }\n        case actionTypes.FETCH_ORDERS_FAIL:\n            return {\n                ...state,\n                loading: false\n            }           \n        default:\n            return state;        \n    };\n};\n\nexport default reducer;","export const updateObject = (oldObject, updatedProperties) => {\n    return {\n        ...oldObject,\n        ...updatedProperties\n    };\n};","import * as actionTypes from '../actions/actionTypes';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    token: null,\n    userId: null,\n    error: null,\n    loading: false,\n    authRedirectPath: '/BurgerBuilder'\n};\n\nconst authStart = (state, action) => {\n    return updateObject(state, {error: null, loading: true});\n};\n\nconst authSuccess = (state, action) => {\n    return updateObject(state, {\n        error: null, \n        loading: false,\n        token: action.idToken,\n        userId: action.userId});\n};\n\nconst authFail = (state, action) => {\n    return updateObject(state, {\n        error: action.error,\n        loading: false});\n};\n\nconst authLogout = (state, action) => {\n        return updateObject(state, {token:null, userId: null});\n};\n\nconst setAuthRedirectPath = (state, action) => {\n    return updateObject(state, { authRedirectPath: action.path})\n};\n\nconst reducer = (state = initialState, action) => {\n    switch(action.type) {\n        case actionTypes.AUTH_START: return authStart(state, action);\n        case actionTypes.AUTH_SUCCESS: return authSuccess(state, action);\n        case actionTypes.AUTH_FAIL: return authFail(state, action);\n        case actionTypes.AUTH_LOGOUT: return authLogout(state, action);\n        case actionTypes.SET_AUTH_REDIRECT_PATH: return setAuthRedirectPath(state, action);\n        default: return state;    \n    };\n};\n\nexport default reducer;","import {delay} from 'redux-saga/effects';\nimport {put} from 'redux-saga/effects';\nimport * as actions from '../actions/index';\nimport axios from 'axios';\n\nexport function* logoutSaga(action) {\n    yield localStorage.removeItem('token');\n    yield localStorage.removeItem('expirationDate');\n    yield localStorage.removeItem('userId');\n    yield put(actions.logoutSucceed());\n};\n\nexport function* checkAuthTimeoutSaga(action) {\n    yield delay (action.expirationTime * 1000);\n    yield put (actions.logout());\n};\n\nexport function* authUserSaga(action) {\n   yield put(actions.authStart());\n    const authData = {\n        email: action.email,\n        password: action.password,\n        returnSecureToken: true,\n    };\n    let url = 'https://www.googleapis.com/identitytoolkit/v3/relyingparty/signupNewUser?key=AIzaSyAkSLdr2daVbnCHHhU1VFNQQpHRpd4dvbY';\n    if (!action.isSignup) {\n        url = 'https://www.googleapis.com/identitytoolkit/v3/relyingparty/verifyPassword?key=AIzaSyAkSLdr2daVbnCHHhU1VFNQQpHRpd4dvbY'};\n\n    try {\n    const response = yield axios.post(url, authData)\n\n    const expirationDate = yield new Date(new Date().getTime() + response.data.expiresIn * 1000);\n    yield localStorage.setItem('token', response.data.idToken);\n    yield localStorage.setItem('expirationDate', expirationDate);\n    yield localStorage.setItem('userId', response.data.localId);\n    yield put(actions.authSuccess(response.data.idToken, response.data.localId));\n    yield put(actions.checkAuthTimeout(response.data.expiresIn))\n    } catch (error) {\n        yield put(action.authFail(error.response.data.error));\n    };\n};\n\nexport function* authCheckStateSaga(action) {\n    const token = yield localStorage.getItem('token');\n        if(!token) {\n            yield put(actions.logout());\n        }else {\n            const expirationDate = yield new Date(localStorage.getItem('expirationDate'));\n            if (expirationDate <= new Date()){\n                yield put(actions.logout());\n            }else {\n                const userId = yield localStorage.getItem('userId');\n                yield put(actions.authSuccess(token, userId));\n                yield put(actions.checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000));\n            }\n        }\n}","import axios from 'axios';\nimport {put} from 'redux-saga/effects';\nimport * as actions from '../actions';\n\nexport function* initIngredientsSaga(action) {\n    try {\n        const response = yield axios.get('https://burgerbuilder-166a2.firebaseio.com/ingredients.json');\n        yield put(actions.setIngrenients(response.data))\n    }catch (error) {\n        yield put(actions.fetchIngredientsFailed());\n    };\n};","import axios from 'axios';\nimport {put} from 'redux-saga/effects';\nimport * as actions from '../actions';\n\nexport function* purchaseBurgerSaga(action) {\n    yield put(actions.purchaseBurgerStart() );\n    try {\n        const response = yield axios.post( 'https://burgerbuilder-166a2.firebaseio.com/orders.json?auth=' + action.token, action.orderData );\n        yield put(actions.purchaseBurgerSuccess(response.data.name, action.orderData));\n    }catch (error) {\n        yield put(actions.purchaseBurgerFail(error));\n    };\n};\n\nexport function* fetchOrdersSaga(action) {\n    yield put(actions.fetchOrderStart());\n    const queryParams = '?auth=' + action.token + '&orderBy=\"userId\"&equalTo=\"' + action.userId + '\"';\n    try {\n        const response = yield axios.get( 'https://burgerbuilder-166a2.firebaseio.com/orders.json?auth=' + queryParams );\n        const fetchedOrders = [];\n            for ( let key in response.data ) {\n                fetchedOrders.push( {\n                    ...response.data[key],\n                    id: key\n                } );\n            }\n        yield put(actions.fetchOrderSucces(fetchedOrders));  \n    }catch (error) {\n        yield put(actions.fetchOrderFail(error));\n    };\n};","import {takeEvery} from 'redux-saga/effects';\n\nimport * as actionTypes from '../actions/actionTypes';\nimport {logoutSaga,\n    checkAuthTimeoutSaga,\n    authUserSaga,\n    authCheckStateSaga} from './auth';\nimport {initIngredientsSaga} from './burgerBuilder';\nimport {purchaseBurgerSaga, fetchOrdersSaga} from './order';\n\nexport function* watchAuth() {\n    yield takeEvery(actionTypes.AUTH_INITIATE_LOGOUT, logoutSaga);\n    yield takeEvery(actionTypes.AUTH_CHECK_TIMEOUT, checkAuthTimeoutSaga);\n    yield takeEvery(actionTypes.AUTH_USER, authUserSaga);\n    yield takeEvery(actionTypes.AUTH_CHECK_STATE, authCheckStateSaga);\n};\n\nexport function* watchBurgerBuilder() {\n    yield takeEvery(actionTypes.INIT_INGREDIENTS, initIngredientsSaga);\n};\n\nexport function* watchOrder() {\n    yield takeEvery(actionTypes.PURCHASE_BURGER, purchaseBurgerSaga);\n    yield takeEvery(actionTypes.FETCH_ORDERS, fetchOrdersSaga);\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"./scss/main.scss\";\nimport {BrowserRouter} from 'react-router-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware, compose, combineReducers} from 'redux';\nimport burgerBuilderReducer from './store/reducers/burgerBuilder';\nimport orderReducer from './store/reducers/order';\nimport authReducer from './store/reducers/auth';\nimport thunk from 'redux-thunk';\nimport createSagaMiddlewere from 'redux-saga';\nimport {watchAuth, watchBurgerBuilder, watchOrder} from './store/sagas/index';\n\nconst composeEnhancers = process.env.NODE_ENV === 'development' ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : null || compose;\n\nconst rootReducer = combineReducers({\n    burgerBuilder: burgerBuilderReducer,\n    order: orderReducer,\n    auth: authReducer \n});\n\nconst sagaMiddlewere = createSagaMiddlewere();\n\nconst store = createStore(rootReducer, composeEnhancers(\n    applyMiddleware(thunk, sagaMiddlewere)\n));\n\nsagaMiddlewere.run(watchAuth);\nsagaMiddlewere.run(watchBurgerBuilder);\nsagaMiddlewere.run(watchOrder);\n\nconst app = (\n    <Provider store={store}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </Provider>\n\n)\nReactDOM.render( app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}