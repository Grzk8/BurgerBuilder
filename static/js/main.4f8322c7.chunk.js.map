{"version":3,"sources":["assets/images/burger-logo.png","components/Burger/Logo/Logo.js","components/Navigation/NavigationItems/NavigationItem/NavigationItem.js","components/Navigation/NavigationItems/NavigationItems.js","components/Navigation/SideDrawer/DrawerToggle/DrawerToggle.js","components/Navigation/Toolbar/Toolbar.js","components/Layout/Backdrop/Backdrop.js","components/Navigation/SideDrawer/SideDrawer.js","components/Layout/Layout.js","components/Layout/Spinner/Spinner.js","components/Burger/BurgerIngredient/BurgerIngredient.js","components/Burger/Burger.js","components/Burger/BuildControls/BuildControl/BuildControl.js","components/Burger/BuildControls/BuildControls.js","components/Layout/Modal/Modal.js","components/Layout/Button/Button.js","components/Burger/OrderSummary/OrderSummary.js","components/containers/BurgerBuilder/BurgerBuilder.js","store/actions/burgerBuilder.js","store/actions/actionTypes.js","store/actions/order.js","components/Order/CheckoutSummary/CheckoutSummary.js","components/Layout/Input/Input.js","components/containers/Checkout/ContactData/ContactData.js","components/containers/Checkout/Checkout.js","components/Order/Order.js","components/containers/container/Orders/Orders.js","App.js","serviceWorker.js","store/reducers/burgerBuilder.js","store/reducers/order.js","index.js"],"names":["module","exports","logo","props","className","style","height","src","burgerLogo","alt","navigationItem","to","link","exact","activeClassName","children","navigationItems","NavigationItem","checkPropTypes","drawerToggle","onClick","clicked","toolbar","DrawerToggle","drawerToggleClicked","Logo","NavigationItems","backdrop","show","sideDrawer","attachedClasses","open","Backdrop","closed","join","Layout","state","showSideDrawer","sideDrawerClosedHandler","setState","sideDrawerToggleHandler","prevState","Toolbar","this","SideDrawer","Component","spinner","BurgerIngredient","ingredient","type","burger","transformedIngredients","Object","keys","ingredients","map","igKey","Array","_","i","key","reduce","arr","el","concat","length","buildControl","label","removed","disabled","added","controls","buildControls","price","toFixed","ctrl","BuildControl","ingrinientAdded","ingredientRemoved","purchasable","ordered","modal","modalClosed","transform","opacity","button","btnType","orderSummary","ingredientSummary","textTransform","Button","purchaseCancelled","purchaseContinued","BurgerBuilder","purchasing","purchaseHandler","purchaseCancelHandler","purchaseContinueHandler","onInitPurchase","history","push","onInitIngredients","sum","disabledInfo","ings","error","Spinner","Burger","BuildControls","onIngridientAdded","onIngridientRemoved","updatePurchaseState","OrderSummary","Modal","connect","burgerBuilder","totalPrice","dispatch","ingName","ingredientName","fetch","then","response","json","catch","Axios","checkoutSummary","width","margin","checkoutCancelled","checkoutContinued","input","inputElement","inputClasses","invalid","shouldValidate","touched","elementType","elementConfig","value","onChange","changed","options","option","displayValue","ContactData","orderForm","name","placeholder","validation","required","valid","street","zipCode","minLength","maxLength","isNumeric","email","isEmail","deliveryMethod","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifer","order","orderData","onOrderBurger","inputChangedHandler","inputIdentifier","updatedOrderForm","updatedFormElement","target","checkValidity","rules","isValid","trim","test","formElementsArray","id","config","form","onSubmit","formElement","Input","loading","method","headers","body","JSON","stringify","resp","console","log","orderId","purchaseBurgerSucces","purchaseBurgerFail","actions","Checkout","checkoutCancelledHandler","goBack","checkoutContinuedHandler","replace","summary","purchasedRedirect","purchased","CheckoutSummary","path","match","component","amount","ingredientOutput","ig","display","border","padding","Number","parseFloat","Orders","onFetchOrders","orders","Order","fetchedOrders","err","App","Boolean","window","location","hostname","initialStore","ingrednient_prices","salad","cheese","meat","bacon","reducer","action","initialState","newOrder","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","burgerBuilderReducer","orderReducer","store","createStore","applyMiddleware","thunk","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4f8322c7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/burger-logo.b8503d26.png\";","import React from 'react';\n\nimport burgerLogo from '../../../assets/images/burger-logo.png';\n\nconst logo = (props) => (\n    <div className='Logo'\n        style={{height: props.height}}>\n        <img src={burgerLogo} alt='BurgerBuilder'/>\n    </div>\n\n);\n\nexport default logo;","import React from 'react';\nimport {NavLink} from 'react-router-dom'\n\nconst navigationItem = (props) => (\n    <li className='NavigationItem'>\n        <NavLink \n        to={props.link}\n        exact\n        activeClassName='active'>{props.children}</NavLink></li>\n);\n\nexport default navigationItem;","import { checkPropTypes } from 'prop-types';\nimport React from 'react';\n\nimport NavigationItem from './NavigationItem/NavigationItem'\n\nconst navigationItems = () => (\n    <ul className='NavigationItems'>\n        < NavigationItem link='/BurgerBuilder' exact={checkPropTypes.exact} >Burger Builder</ NavigationItem>\n        < NavigationItem link='/orders'>Orders</ NavigationItem>\n    </ul>\n);\n\nexport default navigationItems;","import React from 'react';\n\nconst drawerToggle = (props) => (\n    <div className='DrawerToggle' onClick={props.clicked}>\n        <div></div>\n        <div></div>\n        <div></div>\n    </div>\n);\n\nexport default drawerToggle;","import React from 'react';\n\nimport Logo from '../../Burger/Logo/Logo';\nimport NavigationItems from '../NavigationItems/NavigationItems';\nimport DrawerToggle from '../SideDrawer/DrawerToggle/DrawerToggle';\n\n\nconst toolbar = props => (\n    <header className='Toolbar'>\n        <DrawerToggle clicked={props.drawerToggleClicked}/>\n        < Logo height='80%'/>\n        <nav className='DesktopOnly'>\n            <NavigationItems />\n        </nav>\n    </header>\n);\n\nexport default toolbar;","import React from 'react';\n\nconst backdrop = (props) => (\n    props.show ? <div className='Backdrop' onClick={props.clicked}></div> : null\n);\n\nexport default backdrop;","import React from 'react';\n\nimport Backdrop from '../../Layout/Backdrop/Backdrop';\n\nimport Logo from '../../Burger/Logo/Logo';\nimport NavigationItems from '../NavigationItems/NavigationItems';\n\nconst sideDrawer = (props) => {\n    let attachedClasses = ['SideDrawer', 'Close'];\n    if (props.open) {\n        attachedClasses = ['SideDrawer', 'Open']\n    }\n\n    return(\n        <>\n            <Backdrop show={props.open} clicked={props.closed}/>\n            <div className={attachedClasses.join(' ')}>\n                <Logo height='11%'/>\n                <nav>\n                    <NavigationItems />\n                </nav>\n            </div>\n        </>\n\n    );\n};\n\nexport default sideDrawer;","import React, {Component} from 'react';\n\nimport Toolbar from '../../components/Navigation/Toolbar/Toolbar';\nimport SideDrawer from '../Navigation/SideDrawer/SideDrawer';\n\nclass Layout extends Component {\n    state = {\n        showSideDrawer: false\n    }\n\n    sideDrawerClosedHandler = () => {\n        this.setState({showSideDrawer: false});\n    }\n\n    sideDrawerToggleHandler = () => {\n        this.setState((prevState) => { return {showSideDrawer: !prevState.showSideDrawer}\n    });\n    }\n    render() {\n        return (\n            <div>\n                <Toolbar drawerToggleClicked={this.sideDrawerToggleHandler}/>\n                <SideDrawer \n                    open={this.state.showSideDrawer} \n                    closed={this.sideDrawerClosedHandler}/>\n                <main className='content'>\n                    {this.props.children}\n                </main>\n             </div>\n        )\n    }\n}\nexport default Layout;","import React from 'react';\n\nconst spinner = () => (\n    <div className=\"Loader\">Loading...</div>\n);\n\nexport default spinner;","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nclass BurgerIngredient extends Component {\n    render(){\n\n        let ingredient = null;\n        \n        switch (this.props.type) {\n            case ('bread-bottom'):\n                ingredient = <div className='BreadBottom'></div>\n                break;\n            case ('bread-top'):\n                ingredient = (\n                    <div className='BreadTop'>\n                        <div className='Seeds1'></div>\n                        <div className='Seeds2'></div>\n                    </div>\n                );\n                break;\n            case ('meat'):\n                ingredient = <div className='Meat'></div>\n                break;\n                case ('cheese'):\n                    ingredient = <div className='Cheese'></div>\n                    break; \n                case ('salad'):\n                    ingredient = <div className='Salad'></div>\n                    break;      \n                case ('bacon'):\n                    ingredient = <div className='Bacon'></div>\n                    break;\n                default:\n                    ingredient = null;\n        }\n        return ingredient;\n    }\n};\n\nBurgerIngredient.propTypes = {\n    type: PropTypes.string.isRequired\n};\n\nexport default BurgerIngredient;","import React from 'react';\n\nimport BurgerIngredient from './BurgerIngredient/BurgerIngredient'\n\nconst burger = (props) => {\n    let transformedIngredients = Object.keys(props.ingredients).map(igKey => {\n        return [...Array(props.ingredients[igKey])].map((_, i) => {\n            return <BurgerIngredient key={igKey + i} type={igKey} />\n        });\n    })\n    .reduce((arr,el) => {\n        return arr.concat(el)\n    }, []);\n    if (transformedIngredients.length === 0) {\n        transformedIngredients = <p>Please start adding ingredients</p>\n    }\n    return (\n        <div className='Burger'>\n            <BurgerIngredient type='bread-top'/>\n            {transformedIngredients}\n            <BurgerIngredient type='bread-bottom'/>\n        </div>\n    );\n};\n\nexport default burger;","import React from 'react';\n\nconst buildControl = (props) => (\n    <div className='BuildControl'>\n        <div className='Label'>{props.label}</div>\n        <button \n            className='Less' \n            onClick={props.removed} \n            disabled={props.disabled}>Less</button>\n        <button \n            className='More' \n            onClick={props.added}>More</button>\n    </div>\n);\n\nexport default buildControl;","import React from 'react';\n\nimport BuildControl from './BuildControl/BuildControl'\n\nconst controls = [\n    {label: 'Salad', type: 'salad'},\n    {label: 'Bacon', type: 'bacon'},\n    {label: 'Cheese', type: 'cheese'},\n    {label: 'Meat', type: 'meat'},\n];\nconst buildControls = (props) => (\n    <div className='BuildControls'>\n        <p>Current Price: <strong>{props.price.toFixed(2)}</strong></p>\n        {controls.map(ctrl => (\n            <BuildControl \n            key={ctrl.label} \n            label={ctrl.label}\n            added= {()=>props.ingrinientAdded(ctrl.type)}\n            removed= {()=>props.ingredientRemoved(ctrl.type)}\n            disabled = {props.disabled[ctrl.type]} />\n        ))}\n        <button \n        className='OrderButton'\n        disabled={!props.purchasable}\n        onClick={props.ordered}>ORDER NOW</button>\n    </div>\n\n);\n\nexport default buildControls;","import React from 'react';\n\nimport Backdrop from '../Backdrop/Backdrop'\nconst modal = (props)  => (\n    <>\n        <Backdrop show={props.show} clicked={props.modalClosed}/>\n        <div \n            className='Modal'\n            style={{transform: props.show ? 'translateY(0)' : 'translateY(-100vh)',\n            opacity: props.show ? '1' : '0'\n            }}>\n            {props.children}\n        </div>\n    </>\n    \n);\n\nexport default modal;","import React from 'react';\n\nconst button = (props) => (\n<button \nonClick={props.clicked}\ndisabled={props.disabled}\nclassName={[props.btnType, 'Button'].join(' ')} >{props.children}</button>\n);\n\nexport default button;","import React from 'react';\n\nimport Button from '../../Layout/Button/Button'\n\nconst orderSummary = (props) => {\n    const ingredientSummary = Object.keys(props.ingredients).map(igKey => {\n        return (<li key={igKey}><span style={{textTransform: 'capitalize'}}>{igKey}</span>: {props.ingredients[igKey]}</li>);\n    });\n    return (\n        <>\n            <h2>Your Order</h2>\n            <p>A delicious burger with the following integridients:</p>\n            <ul>\n                {ingredientSummary}\n            </ul>\n            <p><strong>Total price: {props.price.toFixed(2)}</strong></p>\n            <p>Continue to Checkout?</p>\n            <Button btnType='Danger' clicked={props.purchaseCancelled}>CANCEL</Button>\n            <Button btnType='Success' clicked={props.purchaseContinued}>CONTINUE</Button>\n        </>\n    )\n};\n\nexport default orderSummary;","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport Spinner from '../../Layout/Spinner/Spinner';\nimport Burger from '../../Burger/Burger';\nimport BuildControls from '../../../components/Burger/BuildControls/BuildControls';\nimport Modal from '../../Layout/Modal/Modal';\nimport OrderSummary from '../../Burger/OrderSummary/OrderSummary';\nimport * as actions from '../../../store/actions/index';\nimport Axios from 'axios';\n\n\n\nclass BurgerBuilder extends Component {\n    state = {\n        purchasing: false\n    }\n\n    componentDidMount () {\n        this.props.onInitIngredients();\n    }\n\n    updatePurchaseState (ingredients) {\n        const sum = Object.keys(ingredients).map (igKey => {\n            return ingredients[igKey]\n        }).reduce((sum, el) => {\n            return sum + el;\n        })\n        return sum > 0;\n    }\n\n\n    purchaseHandler = () => {\n        this.setState({purchasing: true});\n    }\n\n    purchaseCancelHandler = () => {\n        this.setState({purchasing: false});\n    }\n\n    purchaseContinueHandler = () => {\n        this.props.onInitPurchase(); \n        this.props.history.push('/checkout');\n    }\n\n    render (){\n        const disabledInfo = {\n            ...this.props.ings\n        }\n        for (let key in disabledInfo) {\n            disabledInfo[key] = disabledInfo[key] <= 0\n        }\n            //zwraca true lub false {salad: true, meat: false, ...}\n            let orderSummary = null;\n            let burger = this.props.error ? <p>Ingredients can't be loaded!</p> : <Spinner />;\n            \n            if (this.props.ings) {\n                burger = (\n                    <>\n                < Burger ingredients={this.props.ings}/>\n                < BuildControls \n                    ingrinientAdded = {this.props.onIngridientAdded}\n                    ingredientRemoved = {this.props.onIngridientRemoved}\n                    disabled = {disabledInfo}\n                    price = {this.props.price}\n                    purchasable = {this.updatePurchaseState(this.props.ings)}\n                    ordered={this.purchaseHandler}/>\n                    </>\n                );\n                    orderSummary = (\n                        <OrderSummary \n                        ingredients={this.props.ings}\n                        purchaseCancelled={this.purchaseCancelHandler}\n                        purchaseContinued={this.purchaseContinueHandler}\n                        price={this.props.price}/>\n                    )\n            };\n\n        return (\n            <>\n                <Modal \n                show={this.state.purchasing}\n                modalClosed={this.purchaseCancelHandler}>\n                    {orderSummary}\n                </Modal>\n                {burger}\n            </>\n        );\n    }\n};\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,   // mamy dwa reduktory więc wybieramy właściwy -> state.burgerBuilder\n        price: state.burgerBuilder.totalPrice,\n        error: state.burgerBuilder.error\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onIngridientAdded: (ingName) => dispatch(actions.addIngredient(ingName)),\n        onIngridientRemoved: (ingName) => dispatch(actions.removeIngredient(ingName)),\n        onInitIngredients: () => dispatch(actions.initIngredients()),\n        onInitPurchase: () => dispatch(actions.purchaseInit())\n    }    \n}\nexport default connect(mapStateToProps, mapDispatchToProps)(BurgerBuilder, Axios);","import * as actionTypes from './actionTypes';\n\nexport const addIngredient = (name) => {\n    return {\n        type: actionTypes.ADD_INGREDIENT,\n        ingredientName: name\n    };\n};\n\nexport const removeIngredient = (name) => {\n    return {\n        type: actionTypes.REMOVE_INGREDIENT,\n        ingredientName: name\n    };\n};\n\nexport const setIngrenients = (ingredients) => {\n    return {\n        type: actionTypes.SET_INGREDIENTS,\n        ingredients: ingredients\n    };\n};\n\nexport const fetchIngredientsFailed = () => {\n    return {\n        type: actionTypes.FETCH_INGRENIENTS_FAILED\n    }\n}\nexport const initIngredients = () => {\n    return dispatch => {\n        fetch('https://api.npoint.io/944cecc87fb14ec6dbe0/ingredients')\n        .then(response => response.json())\n        .then(response => {\n            dispatch(setIngrenients(response));\n        })\n        .catch(error => {\n            dispatch(fetchIngredientsFailed());\n        });\n    };\n}","export const ADD_INGREDIENT = 'ADD_INGREDIENT';\nexport const REMOVE_INGREDIENT = 'REMOVE_INGREDIENT';\nexport const SET_INGREDIENTS = 'SET_INGREDIENTS';\nexport const FETCH_INGRENIENTS_FAILED = 'FETCH_INGRENIENTS_FAILED';\n\nexport const PURCHASE_BURGER_SUCCES = 'PURCHASE_BURGER_SUCCES';\nexport const PUTCHASE_BURGER_FAIL = 'PUTCHASE_BURGER_FAIL';\nexport const PURCHASE_BURGER_START = 'PURCHASE_BURGER_START';\nexport const PURCHASE_INIT = 'PURCHASE_INIT';\n\nexport const FETCH_ORDERS_START = 'FETCH_ORDERS_START';\nexport const FETCH_ORDERS_SUCCESS = 'FETCH_ORDERS_SUCCESS';\nexport const FETCH_ORDERS_FAIL = 'FETCH_ORDERS_FAIL';","import * as actionsType from './actionTypes';\n\nexport const purchaseBurgerSucces = (id, orderData) => {\n    return {\n        type: actionsType.PURCHASE_BURGER_SUCCES,\n        orderId: id,\n        orderData: orderData\n    };\n};\n\nexport const purchaseBurgerFail = (error) => {\n    return {\n        type: actionsType.PUTCHASE_BURGER_FAIL,\n        error: error\n    };\n};\n\nexport const purchaseBurgerStart = () => {\n    return {\n        type: actionsType.PURCHASE_BURGER_START\n    };\n};\n\nexport const purchaseBurger = (orderData) => {\n    let response = null;\n    return dispatch => {\n        dispatch(purchaseBurgerStart());\n        fetch('https://api.npoint.io/944cecc87fb14ec6dbe0/orders',{\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n              }, \n            body: JSON.stringify({orderData})})\n        .then(resp => resp.json())\n        .then(resp => \n            response = resp,\n            console.log(response),\n            dispatch(purchaseBurgerSucces(response, orderData)))\n        .catch(error => \n        dispatch(purchaseBurgerFail(error)));\n    };\n};\n\nexport const purchaseInit = () => {\n    return {\n        type: actionsType.PURCHASE_INIT\n    };\n};\n\nexport const fetchOrderStart = () => {\n    return {\n        type: actionsType.FETCH_ORDERS_START\n    };\n};\n\nexport const fetchOrderSucces= (orders) => {\n    return {\n        type: actionsType.FETCH_ORDERS_SUCCESS,\n        orders: orders\n    };\n};\n\nexport const fetchOrderFail= (error) => {\n    return {\n        type: actionsType.FETCH_ORDERS_FAIL,\n        error: error\n    };\n};\n\nexport const fetchOrders = () => {\n    return dispatch => {\n        dispatch(fetchOrderStart());\n        fetch('https://api.npoint.io/944cecc87fb14ec6dbe0/orders')\n        .then(response => response.json())\n        .then (resp => {\n            console.log(resp)\n            const fetchedOrders = [];\n            for (let key in resp) {\n                fetchedOrders.push({\n                    ...resp[key], id: key\n                });\n            };\n            dispatch(fetchOrderSucces(fetchedOrders));\n        })\n        .catch(err => {\n            dispatch(fetchOrderFail(err));\n        });\n    };\n};","import React from 'react';\n\nimport Burger from '../../Burger/Burger';\nimport Button from '../../Layout/Button/Button';\n\nconst checkoutSummary = (props) => {\n    return (\n        <div className='CeckoutSummary'>\n            <h1>We hope it tastes well!</h1>\n            <div style={{width: '100%', margin: 'auto'}}>\n                <Burger ingredients= {props.ingredients}/>\n            </div>\n            <Button \n            btnType='Danger'\n            clicked={props.checkoutCancelled}\n            >CANCEL</Button>\n            <Button \n            btnType='Success'\n            clicked={props.checkoutContinued}\n            >CONTINUE</Button>\n        </div>\n    );\n};\n\nexport default checkoutSummary;","import React from 'react';\n\nconst input = (props) => {\n    let inputElement = null;\n    const inputClasses = [inputElement];\n\n    if (props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push('Invalid');\n    }\n    switch (props.elementType) {\n        case ( 'input'):\n            inputElement = <input \n                className={inputClasses.join(' ')} \n                {...props.elementConfig} \n                value={props.value} \n                onChange={props.changed}/>;\n            break;\n        case ( 'trxtarea'):\n            inputElement = <textarea \n                className='InputElement' \n                {...props.elementConfig} \n                value={props.value} \n                onChange={props.changed}/>;\n            break;\n        case ( 'select'):\n             inputElement = \n                <select \n                    className='InputElement' \n                    value={props.value} \n                    onChange={props.changed}>\n                    {props.elementConfig.options.map(option => (\n                        <option key={option.value} value={option.value}>\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>;\n            break;    \n        default:\n            inputElement = <input \n                className='InputElement' \n                {...props.elementConfig} \n                value={props.value} \n                onChange={props.changed}/> \n    }\n\n    return (\n        <div className='Input'>\n            <label className='Label'>{props.label}</label>\n            {inputElement}\n        </div>\n    );\n};\n\nexport default input;","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport Button from '../../../../components/Layout/Button/Button';\nimport Input from '../../../Layout/Input/Input';\nimport Spinner from '../../../Layout/Spinner/Spinner';\nimport * as actions from '../../../../store/actions/index';\n\n\nclass ContactData extends Component {\n    state = {\n        orderForm: {\n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Name',\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            street:  {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Street',\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                    valid: false,\n                    touched: false\n            },\n            zipCode: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'ZIP Code'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 5,\n                    maxLength: 5,\n                    isNumeric: true\n                },\n                valid: false,\n                touched: false\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Your E-Mail'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n            },\n            deliveryMethod: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        {value: 'fastest', displayValue: 'Fastest'},\n                        {value: 'cheapest', displayValue: 'Cheapest'}]\n                },\n                value: 'fastest',\n                validation: {}, // usuwa błąd walidacji przy wyborze opcji\n                valid: true\n            }\n        },\n        formIsValid: false\n    }\n\n    orderHandler = (event) => {\n        event.preventDefault();\n        const formData = {};\n        for (let formElementIdentifer in this.state.orderForm) {\n            formData[formElementIdentifer] = this.state.orderForm[formElementIdentifer].value;\n        }\n        const order = {\n            ingredients: this.props.ings,\n            price: this.props.price,\n            orderData: formData\n        };\n        \n        this.props.onOrderBurger(order);\n    };\n\n    checkValidity(value, rules) {\n        let isValid = true;\n        if (!rules) {\n            return true;\n        }\n        \n        if (rules.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n\n        if (rules.minLength) {\n            isValid = value.length >= rules.minLength && isValid\n        }\n\n        if (rules.maxLength) {\n            isValid = value.length <= rules.maxLength && isValid\n        }\n\n        if (rules.isEmail) {\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        if (rules.isNumeric) {\n            const pattern = /^\\d+$/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        return isValid;\n    }\n\n    inputChangedHandler = (event, inputIdentifier) => {\n        const updatedOrderForm = {\n            ...this.state.orderForm\n        }\n        // klonuję stan ale bez klonowania głębokiego, nie mam dostępu do wartości wewnątrz name, street itd\n        // muszę sklonować je osobno:    , teraz mam dostęp do elementType, value nie mam do elementConfig \n        let updatedFormElement = {\n            ...updatedOrderForm[inputIdentifier]\n        }\n        updatedFormElement.value = event.target.value;\n        updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n        updatedFormElement.touched = true;\n        updatedOrderForm[inputIdentifier] = updatedFormElement;\n               \n        let formIsValid = true;\n        for (let inputIdentifier in updatedOrderForm) {\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n        }\n        this.setState({orderForm: updatedOrderForm, formIsValid: formIsValid});\n    };\n\n\n    render () {\n        const formElementsArray = [];\n        for (let key in this.state.orderForm) {\n            formElementsArray.push({\n                id:key,\n                config: this.state.orderForm[key]\n            })\n        }\n\n        let form = (\n            <form onSubmit={this.orderHandler}>\n                {formElementsArray.map(formElement => (\n                    <Input \n                        key={formElement.id}\n                        elementType={formElement.config.elementType}\n                        elementConfig={formElement.config.elementConfig}\n                        value={formElement.config.value}\n                        invalid={!formElement.config.valid}\n                        shouldValidate={formElement.config.validation}\n                        touched={formElement.config.touched}\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)}/>\n                ))}\n                <Button btnType='Success' disabled={!this.state.formIsValid} clicked={this.orderHandler}>ORDER</Button>\n        </form>\n        );\n        if (this.props.loading) {\n            form = <Spinner />\n        }\n        return (\n            <div className='ContactData'>\n                <h4>Enter your Contact Data</h4>\n            {form}\n            </div>\n        );\n    }\n};\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,   // mamy dwa reduktory więc wybieramy właściwy -> state.burgerBuilder\n        price: state.burgerBuilder.totalPrice,\n        loading: state.order.loading\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onOrderBurger: (orderData) => dispatch(actions.purchaseBurger(orderData))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactData);","import React, {Component} from 'react';\nimport { Redirect, Route } from 'react-router-dom';\nimport {connect} from 'react-redux';\n\nimport CheckoutSummary from '../../Order/CheckoutSummary/CheckoutSummary';\nimport ContactData from './ContactData/ContactData';\n\nclass Checkout extends Component {\n\n    checkoutCancelledHandler = () => {\n        this.props.history.goBack();\n    };\n\n    checkoutContinuedHandler = () => {\n        this.props.history.replace('/checkout/contact-data');\n    };\n\n    render () {\n        let summary = <Redirect to=\"/BurgerBuilder\"/>\n        if (this.props.ings) {\n            const purchasedRedirect = this.props.purchased ? <Redirect to=\"/BurgerBuilder\" /> : null\n            summary = (\n                <>\n                    {purchasedRedirect}\n                    <CheckoutSummary \n                        ingredients={this.props.ings}\n                        checkoutCancelled={this.checkoutCancelledHandler}\n                        checkoutContinued={this.checkoutContinuedHandler}/>\n                    <Route \n                        path={this.props.match.path + '/contact-data'}\n                        component={ContactData} />\n                </> );\n        };\n        return summary\n    };\n};\n\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,    // mamy dwa reduktory więc wybieramy właściwy -> state.burgerBuilder\n        purchased: state.order.purchased\n    }\n};\n\nexport default connect(mapStateToProps)(Checkout);","import React from 'react';\n\nconst order = (props) => {\n    const ingredients = [];\n    for (let ingredientName in props.ingredients) {\n        ingredients.push(\n            {name: ingredientName, \n                amount: props.ingredients[ingredientName]})\n    }\n\n    const ingredientOutput = ingredients.map(ig => {\n    return <span \n        style={{\n            textTransform: 'capitalize', \n            display: 'inline-block', \n            margin: '0 8px', \n            border: '1px solid #ccc',\n            padding: '5px'}}\n        key={ig.name}>{ig.name} {ig.amount}</span>\n    });\n    return (\n        <div className='Order'>\n            <p>Ingredients: {ingredientOutput}</p>\n            <p>Price: PLN {Number.parseFloat(props.price.toFixed(2))}</p>\n        </div>\n    )\n};\n\nexport default order;","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\n\nimport Order from '../../../../components/Order/Order';\nimport * as actions from '../../../../store/actions/index';\nimport Spinner from '../../../Layout/Spinner/Spinner';\n\nclass Orders extends Component {\n    \n    componentDidMount() {\n        this.props.onFetchOrders();\n    }\n    render() {\n        console.log(this.props.orders)\n        let orders = <Spinner />;\n        if (!this.props.loading){\n            orders = ( this.props.orders.map(order => (\n                    <Order \n                    key={order.id}\n                    ingredients={order.orderData.ingredients}\n                    price={+order.orderData.price}/>\n                ))\n            );\n        }\n        return (\n            <>\n                {orders}\n            </>\n        );\n    }\n};\n\nconst mapStateToProps = state => {\n    return {\n        orders: state.order.orders,\n        loading: state.order.loading\n    }\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        onFetchOrders: () => dispatch(actions.fetchOrders()) \n    }\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Orders);","import React from 'react';\nimport { Route, Switch} from 'react-router-dom';\n\nimport Layout from './components/Layout/Layout';\nimport BurgerBuilder from './components/containers/BurgerBuilder/BurgerBuilder';\nimport Checkout from './components/containers/Checkout/Checkout';\nimport Orders from './components/containers/container/Orders/Orders';\n\nfunction App() {\n  return(\n    <>\n      <Layout>\n        <Switch>\n          <Route path='/checkout' component={Checkout} />\n          <Route path='/orders' component={Orders} />\n          <Route path='/BurgerBuilder' exact component={BurgerBuilder} />\n        </Switch>\n      </Layout>\n    </>\n  )\n\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from '../actions/actionTypes';\n\nconst initialStore = {\n    ingredients: null,\n    totalPrice: 4,\n    error: false\n};\n\nconst ingrednient_prices = {\n    salad: 0.4,\n    cheese: 0.5,\n    meat: 1.3,\n    bacon: 0.7\n}\n\nconst reducer = (state = initialStore, action) => {\n    switch(action.type) {\n        case actionTypes.ADD_INGREDIENT:\n            return {\n                ...state,\n                ingredients: {\n                    ...state.ingredients,\n                    [action.ingredientName]: state.ingredients[action.ingredientName] + 1\n                },\n                totalPrice: state.totalPrice + ingrednient_prices[action.ingredientName]\n\n            };\n        case actionTypes.REMOVE_INGREDIENT:\n            return {\n                ...state,\n                ingredients: {\n                    ...state.ingredients,\n                    [action.ingredientName]: state.ingredients[action.ingredientName] - 1\n                },\n                totalPrice: state.totalPrice - ingrednient_prices[action.ingredientName]\n\n            };\n        case actionTypes.SET_INGREDIENTS:\n            return {\n                ...state,\n                ingredients: {\n                    salad: action.ingredients.salad,\n                    bacon: action.ingredients.bacon,\n                    cheese: action.ingredients.cheese,\n                    meat: action.ingredients.meat\n                },\n                error: false,\n                totalPrice: 4\n            };\n        case actionTypes.FETCH_INGRENIENTS_FAILED:\n            return {\n                ...state,\n                error: true\n            }        \n        default:\n            return state;\n    };  \n};\n\nexport default reducer;","import * as actionTypes from '../actions/actionTypes';\n\n\nconst initialState = {\n    orders: [],\n    loading: false,\n    purchased: false\n}\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.PURCHASE_BURGER_START:\n            return {\n                ...state,\n                loading: true\n            };\n        case actionTypes.PURCHASE_BURGER_SUCCES:\n            const newOrder = {\n                ...action.orderData,\n                id: action.orderId\n            };\n            return {\n                ...state,\n                loading: false,\n                purchased: true,\n                orders: state.orders.concat(newOrder)\n            };\n        case actionTypes.FETCH_INGRENIENTS_FAILED:\n            return {\n                ...state,\n                loading: false \n            };\n        case actionTypes.PURCHASE_INIT:\n            return {\n                ...state,\n                purchased: false  \n            };    \n        case actionTypes.FETCH_ORDERS_START:\n            return {\n                ...state,\n                loading: true\n            };\n        case actionTypes.FETCH_ORDERS_SUCCESS:\n            return {\n                ...state,\n                orders: action.orders,\n                loading: false\n            }\n        case actionTypes.FETCH_ORDERS_FAIL:\n            return {\n                ...state,\n                loading: false\n            }           \n        default:\n            return state;        \n    };\n};\n\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"./scss/main.scss\";\nimport {BrowserRouter} from 'react-router-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware, compose, combineReducers} from 'redux';\nimport burgerBuilderReducer from './store/reducers/burgerBuilder';\nimport orderReducer from './store/reducers/order';\nimport thunk from 'redux-thunk';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst rootReducer = combineReducers({\n    burgerBuilder: burgerBuilderReducer,\n    order: orderReducer\n})\n\nconst store = createStore(rootReducer, composeEnhancers(\n    applyMiddleware(thunk)\n));\n\nconst app = (\n    <Provider store={store}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </Provider>\n\n)\nReactDOM.render( app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}